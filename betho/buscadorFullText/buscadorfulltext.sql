-- phpMyAdmin SQL Dump
-- version 2.10.3
-- http://www.phpmyadmin.net
-- 
-- Servidor: localhost
-- Tiempo de generación: 21-11-2010 a las 14:13:11
-- Versión del servidor: 5.0.51
-- Versión de PHP: 5.2.6

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";

-- 
-- Base de datos: `buscadorfulltext`
-- 

-- --------------------------------------------------------

-- 
-- Estructura de tabla para la tabla `buscador`
-- 

CREATE TABLE `buscador` (
  `idNoticia` bigint(20) unsigned NOT NULL auto_increment,
  `titulo` varchar(100) NOT NULL,
  `desarrollo` text NOT NULL,
  `categoria` set('Noticias','Reportes','Revisiones') NOT NULL,
  `estado` set('aprobada','pendiente') NOT NULL default 'pendiente',
  PRIMARY KEY  (`idNoticia`),
  FULLTEXT KEY `titulo` (`titulo`,`desarrollo`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=25 ;

-- 
-- Volcar la base de datos para la tabla `buscador`
-- 

INSERT INTO `buscador` VALUES (1, 'Acerca de PHP', 'PHP es un lenguaje interpretado de propÃ³sito general ampliamente usado y que estÃ¡ diseÃ±ado especialmente para desarrollo web y puede ser incrustado dentro de cÃ³digo HTML. Generalmente se ejecuta en un servidor web, tomando el cÃ³digo en PHP como su entrada y creando pÃ¡ginas web como salida. Puede ser desplegado en la mayorÃ­a de los servidores web y en casi todos los sistemas operativos y plataformas sin costo alguno. PHP se encuentra instalado en mÃ¡s de 20 millones de sitios web y en un millÃ³n de servidores, aunque el nÃºmero de sitios en PHP ha compartido algo de su preponderante sitio con otros nuevos lenguajes no tan poderosos desde agosto de 2005. Este mismo sitio web de Wikipedia estÃ¡ desarrollado en PHP. Es tambiÃ©n el mÃ³dulo Apache mÃ¡s popular entre las computadoras que utilizan Apache como servidor web. La versiÃ³n mÃ¡s reciente de PHP es la 5.3.0 (for Windows) del 30 de junio de 2009.\n\nEl gran parecido que posee PHP con los lenguajes mÃ¡s comunes de programaciÃ³n estructurada, como C y Perl, permiten a la mayorÃ­a de los programadores crear aplicaciones complejas con una curva de aprendizaje muy corta. TambiÃ©n les permite involucrarse con aplicaciones de contenido dinÃ¡mico sin tener que aprender todo un nuevo grupo de funciones.\n\nAunque todo en su diseÃ±o estÃ¡ orientado a facilitar la creaciÃ³n de pÃ¡gina web, es posible crear aplicaciones con una interfaz grÃ¡fica para el usuario, utilizando la extensiÃ³n PHP-Qt o PHP-GTK. TambiÃ©n puede ser usado desde la lÃ­nea de Ã³rdenes, de la misma manera como Perl o Python pueden hacerlo, a esta versiÃ³n de PHP se la llama PHP CLI (Command Line Interface).\n\nCuando el cliente hace una peticiÃ³n al servidor para que le envÃ­e una pÃ¡gina web, el servidor ejecuta el intÃ©rprete de PHP. Ã‰ste procesa el script solicitado que generarÃ¡ el contenido de manera dinÃ¡mica (por ejemplo obteniendo informaciÃ³n de una base de datos). El resultado es enviado por el intÃ©rprete al servidor, quien a su vez se lo envÃ­a al cliente. Mediante extensiones es tambiÃ©n posible la generaciÃ³n de archivos PDF, Flash, asÃ­ como imÃ¡genes en diferentes formatos.\n\nPermite la conexiÃ³n a diferentes tipos de servidores de bases de datos tales como MySQL, Postgres, Oracle, ODBC, DB2, Microsoft SQL Server, Firebird y SQLite.\n\nPHP tambiÃ©n tiene la capacidad de ser ejecutado en la mayorÃ­a de los sistemas operativos, tales como UNIX (y de ese tipo, como Linux o Mac OS X) y Windows, y puede interactuar con los servidores de web mÃ¡s populares ya que existe en versiÃ³n CGI, mÃ³dulo para Apache, e ISAPI.\n\nPHP es una alternativa a las tecnologÃ­as de Microsoft ASP y ASP.NET (que utiliza C# VB.NET como lenguajes), a ColdFusion de la compaÃ±Ã­a Adobe (antes Macromedia), a JSP/Java de Sun Microsystems, y a CGI/Perl. Aunque su creaciÃ³n y desarrollo se da en el Ã¡mbito de los sistemas libres, bajo la licencia GNU, existe ademÃ¡s un IDE (entorno de desarrollo integrado) comercial llamado Zend Studio. Recientemente, CodeGear (la divisiÃ³n de lenguajes de programaciÃ³n de Borland) ha sacado al mercado un entorno integrado de desarrollo para PHP, denominado Delphi for PHP. Existe un mÃ³dulo para Eclipse, uno de los IDE mÃ¡s populares.', 'Noticias', 'aprobada');
INSERT INTO `buscador` VALUES (2, 'EstÃ¡ndares en PHP, Orientado a Objetos', 'El estandar que utilizaremos en PHP es el recomendado por la empresa Zend.\n\nFormato del Archivo\nPara aquellos archivos que contienen sÃ³lo cÃ³digo PHP los tags de demarcaciÃ³n (â€<? â€œ) no estarÃ¡n permitidos, ademÃ¡s no es requerido por PHP y omitirlos nos previene de algÃºn accidente ocasionado por un espacio en blanco.\n\nIdentaciÃ³n\nLa identaciÃ³n consistirÃ¡ en cuatro espacios en blanco y la tabulaciÃ³n no estarÃ¡ permitida.\n\nLargo mÃ¡ximo de la lÃ­nea\nEl largo mÃ¡ximo ideal de una linea de cÃ³digo es de 80 caractÃ©res, esto nos permite una cÃ³moda lectura del mismo. El mÃ¡ximo permitido por PHP es de 120 caractÃ©res.\n\nFin de lÃ­nea\nEl fin de lÃ­nea seguirÃ¡ la convenciÃ³n de texto de Unix. La lÃ­nea debe de terminar con el caracter linefeed (LF) representado con el ordinal 10 Ã³ hexadecimal 0Ã—0A.\nNo utilice el retorno de carro (Enter) (CF) que es un convecionalismo de los Sistemas operativos de Apple Ã³ el retorno de carro / linefeed (CRLF) que es de Windows.\nConvenciÃ³n en los nombres\n\nClases\nEl nombre de las clases debe estar compuesto de caractÃ©res alfanumÃ©ricos. El catacter Underscore (â€_â€) solo es permitido para remplazar al separador en el path del archivo, por ejemplo: â€œZend/Db/Table.phpâ€ quedarÃ­a como â€œZend_Db_Tableâ€.\nSi el nombre de la clase estÃ¡ comprimida en mÃ¡s de una palabra la primera letra debe de ser mayÃºscula. Letras mayÃºsculas seguidas no son permitidas.\nEjemplo: â€œZend_PDFâ€ no es permitido mientras que â€œZend_Pdfâ€ si lo es.\n\nArchivos\nEn el nombre de los archivos se permite caractÃ©res alfanumÃ©ricos, Underscore, dash (â€-â€), pero no estÃ¡ permitido el espacio en blanco.\n\nFunciones y MÃ©todos\nEl nombre de las funciones debe estar compuesto de caractÃ©res alfanumÃ©ricos, el catactÃ©r Underscore no estÃ¡ permitido, siempre tiene que comenzar con letra minÃºscula, si el nombre consiste en mÃ¡s de una palabra la primera letra de cada una de ella deberÃ¡ ser mayÃºscula, por ejemplo: getElementById(), widgetFactory().\nUn correcto empleo de verbos describe mejor el propÃ³sito y comportamiento de las funciones.\nEn caso de la programaciÃ³n orientada a objetos suele colocarse prefijos como â€œgetâ€ Ã³ â€œsetâ€, asi como tambiÃ©n el nombre de los patrones. En el caso que el mÃ©todo sea â€œprivateâ€ Ã³ â€œprotectedâ€ el primer caractÃ©r debe ser Underscore ( Ãºnico caso permitido ), aquelllos declarados â€œpublicâ€ no llevan Underscore.\n\nVariables\nEl nombre de las variables debe estar compuesto de caractÃ©res alfanumÃ©ricos, el catactÃ©r Underscore no estÃ¡ permitido. En el caso que sean declaradas â€œprivateâ€ Ã³ â€œprotectedâ€ el primer caractÃ©r debe ser Underscore ( Ãºnico caso permitido ), aquelllas declaradas â€œpublicâ€ no llevan Underscore.\nSiempre tiene que comenzar con letra minÃºscula, si el nombre consiste en mÃ¡s de una palabra la primera letra de cada una de ella deberÃ¡ ser mayÃºscula. Un correcto empleo de verbos describe mejor la variable. Por ejemplo\naquellas llamadas â€œ$iâ€ y â€œ$nâ€ serÃ­an permitidas en caso de que el algortimo sobrepasara las 20 lÃ­neas.\nConstantes\nEstÃ¡ permitido caractÃ©res alfanumÃ©ricos y Underscore, asi tambiÃ©n NÃºmeros.\nLas letras usadas en las constantes deben ser mayÃºsculas y las palabras separadas por Underscore, por ejemplo:\nEMBED_SUPPRESS_EMBED_EXCEPTION estarÃ­a permitido y EMBED_SUPPRESSEMBEDEXCEPTION no lo estarÃ­a.\nEstilo en el cÃ³digo\n\nPHP CÃ³digo de DelimitaciÃ³n\nTodo cÃ³digo PHP debe estar delimitado por los tags estÃ¡ndares ( los cortos no estÃ¡n permitidos ).\n<?php\n?>\nEstas delimitaciones se omiten en quellos archivos que sÃ³lo contengan cÃ³digo PHP.\n\nString Literales\nCuando se le asigna un texto literal ( sin contenido de variables ) se utilizarÃ¡n comillas simples.\n$a = â€˜Texto de ejemploâ€™Í¾\n\nString Literales con apÃ³strofes\nCuando se le asigna un texto literal con apÃ³strofes se utilizarÃ¡n comillas dobles, este caso es principalmente en las sentencias SQL.\n\n$sql = â€œSELECT `id`, `name` from `some_people` WHERE `name`=â€™Fredâ€™ OR `name`=â€™Susanâ€™â€Í¾\n\nSustituciÃ³n por Variables\nCuando un texto contiene porciones que serÃ¡n sustituidas por el valor de alguna variable, se toma como correcto Ãºnicamente esta dos formas:', 'Revisiones', 'aprobada');
INSERT INTO `buscador` VALUES (3, 'ProgramaciÃ³n Orientada a Objetos (POO 01)', 'Primero aclarar que la ProgramaciÃ³n Orientada a Objetos (POO), no es un lenguaje de programaciÃ³n sino que es un paradigma. Un paradigma segÃºn la WIKI, representa un enfoque particular o filosofÃ­a para la construcciÃ³n del software. La POO se puede aplicar a casi todos los lenguajes modernos.\nPodemos distinguir entre lenguajes Puros e hÃ­bridos. Puros cuando se ajusta 100% a los principios que la tÃ©cnica propone y contempla la posibilidad de trabajar exclusivamente con clases. HÃ­brido, cuando el lenguaje que generalmente existÃ­a antes de la apariciÃ³n de la POO, incorpora caracterÃ­sticas para trabajar con clases.\nConceptos BÃ¡sicos\n\nLos principales conceptos que se vinculan con la POO son Clase, Objeto, MÃ©todo, Instancia, Evento, Mensaje, Propiedad o Atributo, Estado Interno.\n\nClases: son declaraciones o abstracciones de objetos, lo que significa, que una clase es la definiciÃ³n de un objeto. Cuando se programa un objeto y se definen sus caracterÃ­sticas y funcionalidades, realmente se programa una clase.\nLas clases contienen datos (variables, propiedades miembro o atributos) junto con las operaciones de manipulaciÃ³n de esos datos (funciones o MÃ©todos).\nEjemplo de clase en PHP:\n\nclass Nombre {\n    // Variables miembro (habitualmente privadas)\n    private miembro_1; //lista de miembros\n    public miembro_2;\n    protected miembro_3;\n \n    // Funciones o mÃ©todos (habitualmente pÃºblicas)\n    public function miembro_1( );\n    public function miembro_2 ( );\n}\n\nObjetos: se define como la unidad que en tiempo de ejecuciÃ³n realiza las tareas de un programa. TambiÃ©n a un nivel mÃ¡s bÃ¡sico se define como la instancia de una clase. Estos objetos interactÃºan unos con otros, en contraposiciÃ³n a la visiÃ³n tradicional en la cual un programa es una colecciÃ³n de subrutinas (funciones o procedimientos), o simplemente una lista de instrucciones para el computador. Cada objeto es capaz de recibir mensajes, procesar datos y enviar mensajes a otros objetos de manera similar a un servicio. En el mundo de la programaciÃ³n orientada a objetos (POO), un objeto es el resultado de la instanciaciÃ³n de una clase. Una clase es el anteproyecto que ofrece la funcionalidad en ella definida, pero Ã©sta queda implementada sÃ³lo al crear una instancia de la clase, en la forma de un objeto.\n\nMÃ©todo: es una subrutina asociada exclusivamente a una clase. Un mÃ©todo consiste generalmente de una serie de sentencias para llevar a cabo una acciÃ³n, un juego de parÃ¡metros de entrada que regularÃ¡n dicha acciÃ³n y, posiblemente, un valor de salida (o valor de retorno) de algÃºn tipo. Existen 2 tipos de mÃ©todos los de instancia, que estÃ¡n relacionados con un objeto en particular y los estÃ¡ticos o de clase (o compartidos) estÃ¡n asociados a una clase en particular.\nEn ciertos lenguajes de programaciÃ³n se requiere de un metodo especial que son los constructores siendo estos mÃ©todos de instancia especiales llamados automÃ¡ticamente cuando se crea una instancia de alguna clase.\n\nInstancia: se produce con la creaciÃ³n de un objeto perteneciente a una clase (instanciar una clase), que hereda entonces sus atributos, propiedades y mÃ©todos para ser usados dentro de un programa, ya sea como contenedores de datos o como partes funcionales del programa al contener en su interior funcionalidades de tratamiento de datos y procesamiento de la informaciÃ³n que ha sido programada con anterioridad en la clase a la que pertenece. Ejemplo de instancia en php:', 'Noticias', 'aprobada');
INSERT INTO `buscador` VALUES (4, 'Acerca de MySQL', 'El software MySQLÂ® proporciona un servidor de base de datos SQL (Structured Query Language) muy rÃ¡pido, multi-threaded, multi usuario y robusto. El servidor MySQL estÃ¡ diseÃ±ado para entornos de producciÃ³n crÃ­ticos, con alta carga de trabajo asÃ­ como para integrarse en software para ser distribuido. MySQL es una marca registrada de MySQL AB.\n\nEl software MySQL tiene una doble licencia. Los usuarios pueden elegir entre usar el software MySQL como un producto Open Source bajo los tÃ©rminos de la licencia GNU General Public License (http://www.fsf.org/licenses/) o pueden adquirir una licencia comercial estÃ¡ndar de MySQL AB. Consulte http://www.mysql.com/company/legal/licensing/ para mÃ¡s informaciÃ³n acerca de nuestras polÃ­ticas de licencia.\nPrincipales Caracteristicas de MySQL\n\n    * interioridades y portabilidad\n          o Escrito en C y en C  \n          o Probado con un amplio rango de compiladores diferentes\n          o Funciona en diferentes plataformas. Consulte SecciÃ³n 2.1.1, â€œSistemas operativos que MySQL soportaâ€.\n          o Usa GNU Automake, Autoconf, y Libtool para portabilidad.\n          o APIs disponibles para C, C  , Eiffel, Java, Perl, PHP, Python, Ruby, y Tcl. Consulte CapÃ­tulo 24, APIs de MySQL.\n          o Uso completo de multi-threaded mediante threads del kernel. Pueden usarse fÃ¡cilmente multiple CPUs si estÃ¡n disponibles.\n          o Proporciona sistemas de almacenamiento transaccionales y no transaccionales.\n          o Usa tablas en disco B-tree (MyISAM) muy rÃ¡pidas con compresiÃ³n de Ã­ndice.\n          o Relativamente sencillo de aÃ±adir otro sistema de almacenamiento. Esto es Ãºtil si desea aÃ±adir una interfaz SQL para una base de datos propia.\n          o Un sistema de reserva de memoria muy rÃ¡pido basado en threads.\n          o Joins muy rÃ¡pidos usando un multi-join de un paso optimizado.\n          o Tablas hash en memoria, que son usadas como tablas temporales.\n          o Las funciones SQL estÃ¡n implementadas usando una librerÃ­a altamente optimizada y deben ser tan rÃ¡pidas como sea posible. Normalmente no hay reserva de memoria tras toda la inicializaciÃ³n para consultas.\n          o El cÃ³digo MySQL se prueba con Purify (un detector de memoria perdida comercial) asÃ­ como con Valgrind, una herramienta GPL (http://developer.kde.org/~sewardj/).\n          o El servidor estÃ¡ disponible como un programa separado para usar en un entorno de red cliente/servidor. TambiÃ©n estÃ¡ disponible como biblioteca y puede ser incrustado (linkado) en aplicaciones autÃ³nomas. Dichas aplicaciones pueden usarse por sÃ­ mismas o en entornos donde no hay red disponible..\n    * Tipos de columnas\n          o Diversos tipos de columnas: enteros con/sin signo de 1, 2, 3, 4, y 8 bytes de longitud, FLOAT, DOUBLE, CHAR, VARCHAR, TEXT, BLOB, DATE, TIME, DATETIME, TIMESTAMP, YEAR, SET, ENUM, y tipos espaciales OpenGIS. Consulte CapÃ­tulo 11, Tipos de columna.\n          o Registros de longitud fija y longitud variable.\n    * Sentencias y funciones\n          o Soporte completo para operadores y funciones en las clÃ¡usulas de consultas SELECT y WHERE. Por ejemplo:\n\n            mysql> SELECT CONCAT(first_name, \\'' \\'', last_name)\n                -> FROM citizen\n                -> WHERE income/dependents > 10000 AND age > 30;\n\n          o Soporte completo para las clÃ¡usulas SQL GROUP BY y ORDER BY. Soporte de funciones de agrupaciÃ³n (COUNT(), COUNT(DISTINCT ...), AVG(), STD(), SUM(), MAX(), MIN(), y GROUP_CONCAT()).\n          o Soporte para LEFT OUTER JOIN y RIGHT OUTER JOIN cumpliendo estÃ¡ndares de sintaxis SQL y ODBC.\n          o Soporte para alias en tablas y columnas como lo requiere el estÃ¡ndar SQL.\n          o DELETE, INSERT, REPLACE, y UPDATE devuelven el nÃºmero de filas que han cambiado (han sido afectadas). Es posible devolver el nÃºmero de filas que serÃ­an afectadas usando un flag al conectar con el servidor.\n          o El comando especÃ­fico de MySQL SHOW puede usarse para obtener informaciÃ³n acerca de la base de datos, el motor de base de datos, tablas e Ã­ndices. El comando EXPLAIN puede usarse para determinar cÃ³mo el optimizador resuelve una consulta.\n          o Los nombres de funciones no colisionan con los nombres de tabla o columna. Por ejemplo, ABS es un nombre vÃ¡lido de columna. La Ãºnica restricciÃ³n es que para una llamada a una funciÃ³n, no se permiten espacios entre el nombre de funciÃ³n y el â€˜(â€˜ a continuaciÃ³n. Consulte SecciÃ³n 9.6, â€œTratamiento de palabras reservadas en MySQLâ€.\n          o Puede mezclar tablas de distintas bases de datos en la misma consulta (como en MySQL 3.22).\n    * Seguridad\n          o Un sistema de privilegios y contraseÃ±as que es muy flexible y seguro, y que permite verficaciÃ³n basada en el host. Las contraseÃ±as son seguras porque todo el trÃ¡fico de contraseÃ±as estÃ¡ encriptado cuando se conecta con un servidor.\n    * Escalabilidad y lÃ­mites\n          o Soporte a grandes bases de datos. Usamos MySQL Server con bases de datos que contienen 50 millones de registros. TambiÃ©n conocemos a usuarios que usan MySQL Server con 60.000 tablas y cerca de 5.000.000.000.000 de registros.\n          o Se permiten hasta 64 Ã­ndices por tabla (32 antes de MySQL 4.1.2). Cada Ã­ndice puede consistir desde 1 hasta 16 columnas o partes de columnas. El mÃ¡ximo ancho de lÃ­mite son 1000 bytes (500 antes de MySQL 4.1.2).Un Ã­ndice puede usar prefijos de una columna para los tipos de columna CHAR, VARCHAR, BLOB, o TEXT.\n    * Conectividad\n          o Los clientes pueden conectar con el servidor MySQL usando sockets TCP/IP en cualquier plataforma. En sistemas Windows de la familia NT (NT,2000,XP, o 2003), los clientes pueden usar named pipes para la conexiÃ³n. En sistemas Unix, los clientes pueden conectar usando ficheros socket Unix.\n          o En MySQL 5.0, los servidores Windows soportan conexiones con memoria compartida si se inicializan con la opciÃ³n --shared-memory. Los clientes pueden conectar a travÃ©s de memoria compartida usando la opciÃ³n --protocol=memory.\n          o La interfaz para el conector ODBC (MyODBC) proporciona a MySQL soporte para programas clientes que usen conexiones ODBC (Open Database Connectivity). Por ejemplo, puede usar MS Access para conectar al servidor MySQL. Los clientes pueden ejecutarse en Windows o Unix. El cÃ³digo fuente de MyODBC estÃ¡ disponible. Todas las funciones para ODBC 2.5 estÃ¡n soportadas, asÃ­ como muchas otras. Consulte SecciÃ³n 25.1, â€œMySQL Connector/ODBCâ€.\n          o La interfaz para el conector J MySQL proporciona soporte para clientes Java que usen conexiones JDBC. Estos clientes pueden ejecutarse en Windows o Unix. El cÃ³digo fuente para el conector J estÃ¡ disponible. Consulte SecciÃ³n 25.4, â€œMySQL Connector/Jâ€.\n    * LocalizaciÃ³n\n          o El servidor puede proporcionar mensajes de error a los clientes en muchos idomas. Consulte SecciÃ³n 5.9.2, â€œEscoger el idioma de los mensajes de errorâ€.\n          o Soporte completo para distintos conjuntos de caracteres, incluyendo latin1 (ISO-8859-1), german, big5, ujis, y mÃ¡s. Por ejemplo, los caracteres escandinavos â€˜Ã¢â€˜, â€˜Ã¤â€˜ y â€˜Ã¶â€˜ estÃ¡n permitidos en nombres de tablas y columnas. El soporte para Unicode estÃ¡ disponible\n          o Todos los datos se guardan en el conjunto de caracteres elegido. Todas las comparaciones para columnas normales de cadenas de caracteres son case-insensitive.\n          o La ordenaciÃ³n se realiza acorde al conjunto de caracteres elegido (usando colaciÃ³n Sueca por defecto). Es posible cambiarla cuando arranca el servidor MySQL. Para ver un ejemplo de ordenaciÃ³n muy avanzada, consulte el cÃ³digo Checo de ordenaciÃ³n. MySQL Server soporta diferentes conjuntos de caracteres que deben ser especificados en tiempo de compilaciÃ³n y de ejecuciÃ³n.\n    * Clientes y herramientas\n          o MySQL server tiene soporte para comandos SQL para chequear, optimizar, y reparar tablas. Estos comandos estÃ¡n disponibles a travÃ©s de la lÃ­nea de comandos y el cliente mysqlcheck. MySQL tambiÃ©n incluye myisamchk, una utilidad de lÃ­nea de comandos muy rÃ¡pida para efectuar estas operaciones en tablas MyISAM. Consulte CapÃ­tulo 5, AdministraciÃ³n de bases de datos.\n          o Todos los programas MySQL pueden invocarse con las opciones --help o -? para obtener asistencia en lÃ­nea.\n', 'Noticias', 'aprobada');
INSERT INTO `buscador` VALUES (5, 'Entornos de Desarrollo Integrado o IDE\\''s', 'Los Entornos de Desarrollo Integrado o IDE (Integrated Development Environment ), es un programa compuesto por un conjunto de herramientas para un programador. Puede dedicarse a un solo lenguaje de programacion o a varios de ellos. Los componentes mas comunes de los IDEâ€™s son editor de texto (o codigo), compilador, interprete, herramientas de Automatizacion, depurador, controlador de versiones y ofrecen facilidades para el desarrollo de la interfaz grafica de Usuario.\nIDEâ€™s para PHP\n\n    * Zend Studio (de pago): Es quizas uno de los mejores IDE para PHP, es un programa de la casa Zend, orientado al desarrollo de aplicaciones web basado en Eclipse.\n      - Ofrece soporte para PHP 5.3\n      - Integracion con Zend FrameWorks\n      - Integracion con Zend Server\n      - Caracteristicas Abanzadas de Edicion de codigo: Resaltado de sintaxis, autocompletado de cÃ³digo, ayuda de cÃ³digo y lista de parÃ¡metros de funciones y mÃ©todos de clase, inserciÃ³n automÃ¡tica de parÃ©ntesis y corchetes de cierre, sangrado automÃ¡tico, emparejamiento de parÃ©ntesis y corchetes (si se sitÃºa el cursor sobre un parÃ©ntesis (corchete) de apertura (cierre), Zend Studio localiza el correspondiente parÃ©ntesis (corchete) de cierre (apertura))..\n      - Generador de documentacion integrado (phpDoc)\n      - DetecciÃ³n de errores de sintaxis en tiempo real.\n      - Generador de Getters y Setters.\n      - Caracteristicas de Refactorizacion.\n      - Funciones de Depuracion (Debuger): BotÃ³n de ejecuciÃ³n y traza, marcadores, puntos de parada (breakpoints), seguimiento de variables y mensajes de error del intÃ©rprete de PHP. Permite tambiÃ©n la depuraciÃ³n en servidores remotos (requiere Zend Platform).\n      - Barra de herramientas para Internet Explorer y FireFox.\n      - Manual de PHP integrado\n      - Soporte para control de versiones usando CVS o Subversion.\n      - Cliente FTP integrado.\n      - Soporte para navegaciÃ³n en bases de datos y ejecuciÃ³n de consultas SQL.\n      - Soporte basico para otros lenguajes web como HTML, Javascript y XML.\n      - Dispone de vista WYSIWYG, What You See Is What You Get (en inglÃ©s, â€œlo que ves es lo que obtienesâ€)\n\n    * PDT 2.1: (gratis) PHP Develoment tools Project. Tambien basado en eclipse y se dice que el dia que sea tan bueno como Zend Studio, se discontinuara este ultimo y quedara PDT.\n      El programa no necesita instalaciÃ³n: hay que descomprimir el archivo zip en una carpeta y ejecutar el programa eclipse.exe. Es un programa Java, por lo que se necesita tener instalado Java Runtime Environment 1.5 (o posterior).\n      - Existe una version disponible en el sitio comunitario de Zend con el Zend Debuger.\n      - Totalmente compatible con las noramas de Eclipse.\n      - Nuevo mecanismo de indexacion y almacenamiento en cache para mejorar el rendimiento y experiencia en la edicion de codigo y ayudar la navegacion.\n      - Caracteristicas mejoradas con respecto a la programacion orientada a objetos con respecto a la herencia y polimorfismo, permitiendo una mejor navegacion sobre los objetos.\n      - Marcas de referencia, permite ver cuantas veces se referencia un elemento simplemete cliqueando sobre el.\n      - Indicador de sobreescritura de metodos. son marcadores iconos que se muestran cuando se esta sobreescribiendo o implementando un metodo de una clase padre.\n      - Navegacion por jerarquias\n      - Ayudas de codigo mejoradas.', 'Reportes', 'aprobada');
INSERT INTO `buscador` VALUES (6, 'Otros Conceptos de POO (POO 02)', 'Sobrecarga de Metodos\n\nLa interpretacion de PHP para la sobrecarga de mÃ©todos, es diferente a la mayoria de los lenguajes orientados a objetos. La sobrecarga tradicional proporciona la capacidad de tener multiples mÃ©todos con el mismo nombre, pero con diferente nÃºmero y/o tipo de parÃ¡metros (a esto se le llama firma del metodo), dependiendo de ellos se ejecutarÃ¡ una funciÃ³n u otra.\n\nEn JAVA la sobrecarga seria asÃ­:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n	\n\nclass Pruebas\n{\n    public void Pruebas()\n   {\n        System.out.println(\\"Hola Pruebas\\");\n    }\n \n    public void Pruebas(String name)\n    {\n        System.out.println(\\"Hola \\"   name);\n    }\n \n    public void Pruebas(String firstName, String lastName)\n    {\n        System.out.println(\\"Hola \\"   firstName   \\" \\"   lastName);\n    }\n}\n\nEn este caso declaramos 3 constructores (Metodos que inicializan el objeto pruebas), que reciben diferente cantidad de parametros. De esta forma segun el numero de parametros que pasemos se ejecuta uno u otro metodo.\nComo logramos esto en PHP, si no soporta la sobrecarga de metodos en esa forma. Para ello se recurre a un metodo magico que es el mÃ©todo __call().\nMetodo __call()\n\nSe trata de un mÃ©todo â€œmÃ¡gicoâ€ que permite capturar la invocaciÃ³n de mÃ©todos no existentes. EstÃ© mÃ©todo puede ser redefinido para cubrir las necesidades del proyecto o como en este caso, proporcionar sobrecarga a nuestros scripts. Aprovechando estÃ¡ funcionalidad podemos controlar la funciÃ³n a la que estamos llamando y redirigir a la funciÃ³n concreta a la que hacemos referencia.\n\n1\n2\n3\n4\n5\n\n	\n\nmixed __call ( string $nombre, array $argumentos );\n/** La funciÃ³n _call() recibe dos parÃ¡metros:\n * $nombre -> El nombre del mÃ©todo\n * $argumentos -> Los argumentos pasados a la funciÃ³n.\n*/\n\nUna forma de implementarlo con este metodo es la siguienteâ€¦\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n	\n\n<?php\nclass SobreCarga\n{\n	public function __call($metodo, $parametros)\n	{	if (method_exists($this, $metodo.sizeof($parametros))) return call_user_func_array(array($this, $metodo.sizeof($parametros)), $parametros);\n                // Si la Funcion no Existe\n                throw new Exception(\\''Metodo Desconocido: \\''.get_class($this).\\''::\\''.$metodo);\n        }\n \n        function Param2($a, $b) {\n                echo \\"<br />Param2($a,$b)\\\\n\\";\n        }\n \n        function Param3($a, $b, $c) {\n                echo \\"<br />Param3($a,$b,$c)\\\\n\\";\n        }\n}\n \n$o = new SobreCarga();\n$o->Param(4,5);\n$o->Param(4,5,6);\n$o->ParamX(4,5,6,7);\n?>\n// La salida de este script seria:\nParam2(4,5)\nParam3(4,5,6)\nFatal error: Uncaught exception \\''Exception\\'' with message \\''Metodo Desconocido: SobreCarga::ParamX\\'' in C:\\\\AppServ\\\\www\\\\clasesPHP\\\\sobrecarga.php:7 Stack trace: #0 [internal function]: SobreCarga->__call(\\''ParamX\\'', Array) #1 C:\\\\AppServ\\\\www\\\\clasesPHP\\\\sobrecarga.php(22): SobreCarga->ParamX(4, 5, 6, 7) #2 {main} thrown in C:\\\\AppServ\\\\www\\\\clasesPHP\\\\sobrecarga.php on line 7\n\nla funcion method_exists() comprueba que el metodo de clase existe y requiere 2 parametros un objeto donde se buscara el mÃ©todo y el nombre del mÃ©todo a buscar. La misma retorna un booleano, true si existe el metodo en la clase o false en caso contrario.\nbool method_exists ( object object, nombreDeMetodo )\nEs lo que hace la consulta de la linea 7. En caso de ser verdadera es decir existe el mÃ©todo utiliza la funcion call_user_func_array () que lo que realiza es Llamar una funciÃ³n definida por el usuario dada por funcion, con los parÃ¡metros establecidos.\nmixed call_user_func_array ( callback funcion, array matriz_parametros );\ncallback funcion contiene una estructura de array donde debera constar el objeto y el metodo a llamar por ejemplo array(â€˜MiClaseâ€™, â€˜miMetodoDeRetornoâ€™). Por lo cual la llamada de tipo array($this, $metodo.sizeof($parametros)) le indica que retorne de esta misma clase($this) el metodo que se llama $metodo.sizeof($parametros) donde sizeof es el numero de parametros pasados.\n\nComo se puede ver no existe en PHP la sobrecarga tradicional, pero se puede llegar a simular con un poco de trabajo.\nFuente: Anieto, php.net\nSobre-Escritura de MÃ©todos\n\nEs un mecanismo por el cual una clase que hereda puede redefinir los mÃ©todos que estÃ¡ heredando. Es decir que podemos crear un mÃ©todo con el mismo nombre que el mÃ©todo de la clase padre. Ahora cuando creamos un objeto de la subclase, el mÃ©todo que se llamarÃ¡ es el de dicha subclase.\nLo mÃ¡s conveniente es sobreescribir mÃ©todos para completar el algoritmo del mÃ©todo de la clase padre. No es bueno sobreescribir un mÃ©todo y cambiar completamente su comportamiento.\nUn ejemplo sencillo.\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n	\n\n<?php\nclass Saludo\n{	public function saludar()\n	{\n		echo \\''<br />Hola\\'';\n	}\n \n	public function despedida()\n	{\n		echo \\''<br />Chau\\'';\n	}\n}\n \nclass BuenosDias extends Saludo\n{\n	public function saludar()\n	{\n		echo \\''<br />Buenos Dias\\'';\n	}\n}\n$instancia	= new BuenosDias();\n$instancia->saludar();\n$instancia->despedida();\n// El resultado seria:\nBuenos Dias\nChau\n?>\n\nEn el resultado se ve claro que ejecuta el metodo de la clase hija.\nla palabra extends indica que hereda los metodos y propiedades de la clase padre Saludo.', 'Revisiones', 'aprobada');
INSERT INTO `buscador` VALUES (7, 'Cambiar de TamaÃ±os a las ImÃ¡genes en el Servidor', 'La clase imagen soporta la ediciÃ³n de tres tipos de archivos de imagen, JPG, GIF y PNG, asÃ­ como mantiene las transparencias en los Ãºltimos dos tipos.\nSoporta 4 modos de recorte numerados del 0 al 3 que son los siguiente:\n\n    * Modo 0: Respeta la Proporcionalidad (Escala) de la imagen y toma como base de calculo el ancho.\n    * Modo 1: Respeta la Proporcionalidad de la imagen y toma como base de calculo el alto.\n    * Modo 2: Respeta el ancho y alto indicado, asÃ­ como la proporcionalidad pero recortando la imagen (Se pueden perder porciones de imagen si las escalas de origen y destino difieren).\n    * Modo 3: Re-escala la imagen a el alto y ancho indicado, no manteniendo la proporcionalidad de la escala origen, pero si mantiene todo el contenido de la imagen (la imagen se puede deformar).\n\n(Escala = ancho /alto)\n\nComo se utiliza el Modo 2\n\nEn el modo 2 o recorte debemos configurar 3 variables, filas y columnas , lo que genera una cuadricula virtual y una tercer variable que se llama centrado que indica en el cuadrante que se deberÃ¡ centrar la imagen para su recorte.\n\nEjemplo si elegimos filas = 3, columnas = 4 y centrado 11\nFila 1.[00][01][02][03]\nFila 2.[04][05][06][07]\nFila 3.[08][09][10][11]\nLa cuadricula seria la anterior y la clase intentara centrar la imagen recortada en el cuadrante 11 es decir recortarÃ­a manteniendo intacto el lado inferior derecho de la imagen.\n\nLa clase soporta dos tipos de pasajes de parÃ¡metros, uno a travÃ©s de sentencias set y otra en el momento de la creaciÃ³n pasarle una estructura JSON.\n\nEjemplos de Uso:', 'Reportes', 'aprobada');
INSERT INTO `buscador` VALUES (8, 'Constructores, Destructores y auto-carga de Clases (POO 03)', 'Constructor\n\nEs un mÃ©todo especial de una clase , que es llamado siempre que se inicializa un objeto. Es decir cuando instanciamos una clase se ejecuta ese mÃ©todo automÃ¡ticamente, se utiliza para cualquier inicializaciÃ³n que el objeto pueda necesitar antes de ser usado.\nLa sintaxis bÃ¡sica es: void __construct ( [mixed args [, ...]] ), dado que esta forma solo esta soportada a partir de PHP5, tambiÃ©n se puede declarar un constructor usando el mismo nombre que la clase a la cual pertenece (Para otorgar compatibilidad con PHP4), es decir si al instanciar no encuentra el mÃ©todo __construct(), PHP buscara un mÃ©todo que se llame igual que la clase.\n\nSi una clase que hereda (sub-clase o clase hija), tiene definido su propio constructor, entonces al crear el objeto de esta, solo se ejecutara el constructor propio de la clase hija y no el de la clase superior o padre. Si necesitamos que la clase padre ejecute su constructor entonces debemos realizar una llamada explicita al mÃ©todo padre de la siguiente manera parent::__construct().\n\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n	\n\n<?php\nclass BaseClase\n{\n    function __construct()\n    {\n        print \\"Constructor de Clase Base<br />\\\\n\\";\n    }\n}\n \nclass SubClase extends BaseClase\n{\n    function __construct()\n    {\n        parent::__construct();   // llamamos al constructor de la clase padre.\n        print \\"Constructor en clase Hija<br />\\\\n\\";\n    }\n}\n \n$obj = new BaseClase();\n// salida : Constructor de Clase Base\n$obj = new SubClase();\n// salida: Constructor de Clase Base\n//          Constructor en clase Hija\n?>\n\nDestructor\n\nPHP 5 introduce un concepto de destructor similar a aquellos de otros lenguajes de programaciÃ³n orientada a objetos, tal como C  . El mÃ©todo destructor serÃ¡ llamado tan pronto como todas las referencias a un objeto en particular sean removidas o cuando el objeto sea explÃ­citamente destruido. En definitiva es otro mÃ©todo especial de una clase que se ejecuta antes de que un objeto de esa clase sea eliminado fÃ­sicamente de la memoria. El destructor se utiliza para realizar las acciones finales, como borrar viejos archivos o liberar recursos.\n\nComo sucede en los constructores, los destructores de la clase padre no serÃ¡n llamados explÃ­citamente por el compilador. Para ejecutar un destructor padre, se debe tener una llamada explÃ­cita a parent::__destruct() en el cuerpo del destructor.\nEl destructor es llamado durante la finalizaciÃ³n del script, de tal manera que los headers ya han sido enviados.\nSi se intenta arrojar una excepciÃ³n desde un destructor produce un error fatal.\n\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n	\n\n<?php\nclass MyDestructableClass\n{\n    function __construct()\n    {\n        print \\"In constructor\\\\n\\";\n        $this->name = \\"MyDestructableClass\\";\n   }\n \n    function __destruct()\n    {\n        print \\"Destroying \\" . $this->name . \\"\\\\n\\";\n    }\n}\n \n$obj = new MyDestructableClass();\n?>\n\nAuto-Carga de Clases\n\nMuchos desarrolladores que escriben aplicaciones con programaciÃ³n orientada a objetos crean un archivo fuente PHP por cada definiciÃ³n de clase. Una de las molestias mÃ¡s grandes es tener que escribir una larga lista de includes necesarios al principio de cada script (uno para cada clase).\n\nEn PHP 5, esto ya no es necesario. Puede definir una funciÃ³n __autoload la cual es llamada automÃ¡ticamente en caso de que intente usar una clase que no ha sido definida aÃºn. Al llamar esta funciÃ³n la ejecuciÃ³n del script da una Ãºltima oportunidad de cargar la clase antes de que PHP falle con un error.\n\nLas excepciones arrojadas en la funciÃ³n __autoload no pueden ser capturadas en el bloque catch y resultan en el despliegue de un error fatal.\n\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n	\n\n<?php\nfunction __autoload($nombreDeClase)\n{\n	require_once $nombreDeClase . \\''.php\\'';\n}\n \n$obj  = new MyClass1();\n$obj2 = new MyClass2();\n?>\n\nLa pequeÃ±a rutina intenta levantar la clase MyClass1, al fallar y tener el mÃ©todo mÃ¡gico __autoload, pasa el nombre de la clase a dicha funciÃ³n quien realiza el include para poder lograr la instancia.', 'Reportes', 'aprobada');
INSERT INTO `buscador` VALUES (9, 'Modificadores de acceso y abstract, final, static (POO 04)', 'Los modificadores de acceso nos dan la posibilidad de poder establecer la visibilidad de los atributos y mÃ©todos de una clase, o de una manera mas sencilla es un forma de establecer los permisos que tendran otros objetos para acceder a los mÃ©todos y atributos de la clase.\n\nModificador public\nEs el modificador de acceso por defecto es decir si no ponemos nada en el atributo o metodo este tomara el modificador public o sea que el mÃ©todo o atributo sera publico.\n\n    * public aplicado a un atributo o mÃ©todo: significa que es accesible por cualquier clase que los invoque desde una referencia a un objeto de la clase contenedora. Resumiendo se accede desde cualquier objeto haciendo referencia al objeto propietario.\n    * public no se puede aplicar a clases como por ejemplo en JAVA.\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n	\n\nclass modificadores\n{\n	public	$mensajeUno;\n	private	$mensajeDos;\n \n	public function getMensajeUno()\n	{\n		echo $this->mensajeUno;\n	}\n \n	public function getMensajeDos()\n	{\n		echo $this->mensajeDos;\n	}\n}\n$modificador	= new modificadores();\n$modificador	->mensajeUno = \\''Probando Modificadores\\'';\n$modificador	->getMensajeUno();\n?>\n\nEn este caso como el atributo $mensajeUno es publico se puede acceder desde fuera de la clase, con tener una instancia en este caso $modificador lo podemos cambiar y tambien desplegar aunque en este caso usamos el metodo publico getMensajeUno.\n\nModificador private\nSe puede aplicar tanto a atributos como mÃ©todos y es el nivel mas restrictivo de todos. Solo permite acceder desde el propio objeto, nunca desde fuera. Si nosotros intentÃ¡ramos configurar el atributo mensajeDos como el Uno nos darÃ­a un error, para poder cambiar el texto tenemos que crear un mÃ©todo publico que realice la tarea.\nUn ejemplo del mÃ©todo necesario seria:\n\n1\n2\n3\n4\n\n	\n\npublic function setMensajeDos($texto)\n	{\n		$this->mensajeDos	= $texto;\n	}\n\nEjemplo de como accederiamos es el siguiente:\n\n$modificador	= new modificadores();\n$modificador	->mensajeDos = \\''Probando Modificadores\\''; 	// Error\n$modificador	->setMensajeDos(\\''Asi se debe realizar\\'');	// Correcto\n$modificador	->getMensajeDos();\n\nModificador protected\nEs un nivel intermedio de accesibilidad. Si lo aplicamos a un atributo o mÃ©todo este sera accesible desde la propia clase y desde las clases que heredan de esta. Fuera de estas clases se comportan como si fueran atributos o metodos privados.\n\nabstract\n\nPHP 5 introduce las clases y mÃ©todos abstractos. Cuando una clase es abstracta no se permite crear una instancia de la misma. Si una clase contiene un metodo abstracto la misma debera ser declarada como abstracta. Los mÃ©todos definidos como abstractos no se implementan en dicha clase simplemente se declara la firma del mismo.\n\nCuando heredamos de una clase abstracta, todos los mÃ©todos definidos como abstractos en la clase padre, deben ser definidos en la clase hijo, teniendo en cuenta que la visibilidad de los mismos no puede ser menor a la definida en el metodo declarado como abstracto es decir no se puede restringir la visibilidad. A modo de ejemplo si un metodo es declarado como protected en la clase abstracta, cuando implementamos el mismo en la clase hija el mismo debera ser protected o public pero nunca podra ser private pues estariamos restringiendo la visibilidad.\n\nResumiendo:\n\n    * Aplicado a un metodo significa que no se implementa en la clase actual.\n    * Aplicado a una clase significa que no se puede instanciar.\n\nfinal\n\n    * Aplicado a un atributo significa que es invariante (constante).\n    * Aplicado a un metodo significa que no se puede sobreescribir. Es decir la clase que hereda no puede volver a implementar el metodo.\n    * Aplicado a una clase significa que no se puede heredar.\n\nstatic\nLa declaraciÃ³n de atributos de clase o mÃ©todos como estÃ¡tico los hace accesibles sin necesitar un instancia de la clase. No se puede tener acceso a una propiedad declarada como estÃ¡tica con una variable que es una instancia del objeto (aunque un mÃ©todo estÃ¡tico pueda) y no puede ser redefinido en una clase que herede de esta.\n\nLa declaracion de static tiene que estar despues de la declaracion de visibiliadad, para la compatibilidad con PHP 4, si no se declara la visibilidad del atributo o metodo definido como static, entonces PHP los tratara como si fuesen public (publicos).\n\nComo los mÃ©todos estÃ¡ticos son accesibles sin una instancia del objeto,lapseudovariable $this no estÃ¡ disponible dentro del mÃ©todo declarado como estÃ¡tico, para esto se debera usar self::.\n\nLas propiedades estÃ¡ticas no pueden ser accesadas a travÃ©s del objeto usando el operador de flecha ->.\n\nLa llamada a mÃ©todos no estÃ¡ticos desde un metodo estatico genera una advertencia de nivel E_STRICT.\n\nUna variable estatica solo se puede inicializar usando un literal o una constante, no se permite que sea con expresiones . Usted puede inicializar una propiedad estatica a un entero(integer) o a un arreglo (array) como cualquier otra variable, pero no se puede inicializar a una variable, un retorno de una funcion o un objeto.\n\nSi una variable se etiqueta como static, solo existira un ejemplar para todos los objetos de la clase.\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n	\n\n<?php\nclass estatica\n{	static 	$variable	= 3;\n \n	public function getVariable()\n	{	echo \\"<br />Static: \\" . self::$variable;	}\n \n	public function setVariable($valor)\n	{	self::$variable	= $valor;	}\n}\n// Creamos 2 instancias para ver que el valor es para\n// todas las instancias.\n$modificador1	= new estatica();\n$modificador2	= new estatica();\n// Formas de acceder al valor\necho \\"Ver Directamente:\\" . estatica::$variable;\n$modificador1	->getVariable();\n// Cambiamos el valor con el modificador1\n// y mostramos el valor del 2.\n$modificador1 	->setVariable(5);\n$modificador2	->getVariable();\n/* SALIDA POR PANTALLA\nVer Directamente:3\nStatic: 3	 # con modificador1\nStatic: 5	 # con modificador2\n */\n?>\n\nFuente:\n\n    * Manual PHP\n    * Desarrollo Web', 'Revisiones', 'aprobada');
INSERT INTO `buscador` VALUES (10, 'Campos de tipo Numericos en MySQL', 'MySQL soporta todos los tipos de datos SQL numÃ©ricos estÃ¡ndar. Incluye los tipos numÃ©ricos enteros (INTEGER, SMALLINT, DECIMAL, NUMERIC) y los con decimales (FLOAT, REAL, DOUBLE PRECISION).\nLa palabra clave INT es sinonimo de INTEGER y la palabra clave DEC de DECIMAL.\n\nA partir de MySQL 5.0.3 esta disponible el campo tipo BIT el cual almacena valores de un bit, antes se interpretaba como un TINYINT(1), en esta version solo esta soportado para tablas de tipo MyISAM a partir de la version 5.0.5 se amplia a tablas tipo MEMORY, InnoDB y BDB.\nTipo\n	\nBytes\n	\nValor MÃ­nimo\n	\nValor MÃ¡ximo\n		(Con signo/Sin signo) 	(Con signo/Sin signo)\nTINYINT 	1 	-128 	127\n		0 	255\nSMALLINT 	2 	-32768 	32767\n		0 	65535\nMEDIUMINT 	3 	-8388608 	8388607\n		0 	16777215\nINT 	4 	-2147483648 	2147483647\n		0 	4294967295\nBIGINT 	8 	-9223372036854775808 	9223372036854775807\n		0 	18446744073709551615\n\nEn MySQL tambiÃ©n se puede especificar el ancho a mostrar de un tipo entero en parÃ©ntesis despuÃ©s de la palabra clave para el tipo (por ejemplo, INT(4)). Esta especificaciÃ³n opcional del ancho de muestra se usa para alinear a la izquierda la muestra de los valores con ancho menor que el ancho especificado para la columna.\n\nEl ancho de muestra no restringe el rango de valores que pueden almacenarse en la columna, no el nÃºmero de dÃ­gitos que se muestran para valores con ancho que exceda el especificado para la columna.\n\nCuando se usa en conjunciÃ³n con el atributo de extensiÃ³n opcional ZEROFILL, el relleno por defecto de espacios se remplaza por ceros. Por ejemplo, para una columna declarada como INT(5) ZEROFILL, un valor de 4 se muestra como 00004. Tenga en cuenta que si almacena valores mayores que el ancho de muestra en una columna entera, puede tener problemas cuando MySQL genera tablas temporales para algunos joins complicados, ya que en estos casos MySQL cree que los datos encajan en el ancho original de la columna.\n\nTodos los tipos enteros pueden tener un atributo opcional (no estÃ¡ndar) UNSIGNED. Los valores sin signo pueden usarse cuando quiere permitir sÃ³lo nÃºmeros no negativos en una columna y necesita un rango numÃ©rico mayor para la columna.\n\nTipos de coma flotante y de coma fija pueden ser UNSIGNED. Como con los tipos enteros, este atributo evita que los valores negativos se almacenen en la columna. Sin embargo, a diferencia de los tipos enteros, el rango superior de los valores de la columna sigue siendo el mismo.\n\nSi especifica ZEROFILL para una columna numÃ©rica, MySQL aÃ±ade automÃ¡ticamente el atributo UNSIGNED a la columna.\n\nPara columnas de tipo coma flotante, MySQL usa cuatro bytes para valores de precisiÃ³n simple y ocho bytes para valores de doble precisiÃ³n.\n\nEl tipo FLOAT se usa para representar tipos numÃ©ricos aproximados. El estÃ¡ndar SQL permite una especificaciÃ³n opcional de la precisiÃ³n (pero no del rango del exponente) en bits a continuaciÃ³n de la palabra clave FLOAT entre parÃ©ntesis. La implementaciÃ³n de MySQL soporta esta especificaciÃ³n opcional de precisiÃ³n, pero el valor de precisiÃ³n se usa sÃ³lo para determinar el tamaÃ±o de almacenamiento. Una precisiÃ³n de 0 a 23 resulta en una columna de precisiÃ³n simple de cuatro bytes de tamaÃ±o FLOAT . Una precisiÃ³n de 24 a 53 resulta en una columna de doble precisiÃ³n de ocho bytes de tamaÃ±o DOUBLE .\n\nCuando se especifica la palaba clave FLOAT para tipos de columnas sin especificar la precisiÃ³n, MySQSL usa cuatro bytes para almacenar los valors. MySQL tambiÃ©n soporta una sintaxis alternativa con dos nÃºmeros entre parÃ©ntesis a continaciÃ³n de la palabra clave FLOAT . El primer nÃºmero representa el ancho a mostrar y el segundo nÃºmero especifica el nÃºmero de dÃ­gitos a almacenar a continuaciÃ³n del punto decimal ( como con DECIMAL y NUMERIC). Cuando se pide a MySQL que almacene un nÃºmero para tales columnas con mÃ¡s dÃ­gitos decimales a continuaciÃ³n del punto decimal del especificado para la columna, el valor se redondea para elminar los dÃ­gitos extras cuando se almacena el valor.\n\nEn SQL estÃ¡ndar, los tipos REAL y DOUBLE PRECISION no aceptan especificaciones de precisiÃ³n. MySQL soporta una sintaxis alternativa con dos nÃºmeros dados entre parÃ©ntesis a continuaciÃ³n del nombre del tipo. El primer nÃºmero representa el ancho a mostrar y el segundo nÃºmero especifica el nÃºmero de dÃ­gitos a almacenar y mostrar a continuaciÃ³n del punto decimal. Como una extensiÃ³n al estÃ¡ndar SQL, MySQL reconoce DOUBLE como sinÃ³nimo del tipo DOUBLE PRECISION . En contraste con el requerimiento estÃ¡ndar que la precisiÃ³n para REAL sea menor que la usada para DOUBLE PRECISION, MySQL implementa ambas como valores de punto flotante de doble precisiÃ³n con tamaÃ±o de ocho bytes (a no ser que el modo SQL del servidor incluya la opciÃ³n REAL_AS_FLOAT ).\n\nPara portabilidad mÃ¡xima, el cÃ³digo que requiera almacenamiento de datos numÃ©ricos aproximados debe usar FLOAT o DOUBLE PRECISION sin especificar la precisiÃ³n ni el nÃºmero de dÃ­gitos decimales.\n\nLos tipos DECIMAL y NUMERIC se implementan como el mismo tipo en MySQL. Se usan para guardar valores para los que es importante preservar una precisiÃ³n exacta, por ejemplo con datos monetarios. Cuando se declara una columna de alguno de estos tipos, la precisiÃ³n y la escala puede especificarse (y usualmente se hace), por ejemplo:\n\nsalary DECIMAL(5,2)\n\nEn este ejemplo, 5 es la precisiÃ³n y 2 es la escala. La precisiÃ³n representa el nÃºmero de dÃ­gitos decimales significativos que se almacenan para los valores, y la escala representa el nÃºmero de dÃ­gitos que pueden almacenarse a continuaciÃ³n del punto decimal.\n\nDesde MySQL 5.0.3, los valores DECIMAL y NUMERIC se almacenan en formato binario. Antes de 5.0.3, MySQL almacena los valores DECIMAL y NUMERIC como cadenas de caracteres, en lugar de binario. .Un carÃ¡cter se usa para cada dÃ­gito del valor, el punto decimal (si la escala es mayor que 0), y el signo â€˜-â€˜ (para nÃºmeros negativos). Si la escala es 0, los valores DECIMAL y NUMERIC no contienen punto decimal o parte fraccional.\n\nSQL estÃ¡ndar requiere que la columna salary sea capaz de almacenar cualquier valor con cinco dÃ­gitos y dos decimales. En este caso, por lo tanto, el rango de valores que puede almacenarse en la columna salary es desde -999.99 a 999.99. MySQL fuerza este lÃ­mite desde MySQL 5.0.3. Antes de 5.0.3, MySQL 5.0 variaba este lÃ­mite de forma que, en el lÃ­mite positivo del rango, la columna podÃ­a almacenar nÃºmeros hasta 9999.99. (Para nÃºmeros positivos, MySQL 5.0.2 y anteriores usaba el byte reservado para el signo para extender el lÃ­mite superior del rango.)\n\nEn SQL estÃ¡ndar, la sintaxis DECIMAL(M) es equivalente a DECIMAL(M,0). Similarmente, la sintaxis DECIMAL es equivalente a DECIMAL(M,0), donde la implementaciÃ³n se permite para decidir el valor de M. Ambas formas de los tipos DECIMAL y NUMERIC se soportan en MySQL 5.0. El valor por defecto de M es 10.\n\nEl mÃ¡ximo rango de los valores DECIMAL y NUMERIC es el mismo para DOUBLE, pero el rango real para un valor dado en una columna DECIMAL o NUMERIC puede restringirse con la precisiÃ³n o escala para una columna dada. Cuando en tal columna se asigna un valor con mÃ¡s dÃ­gitos siguiendo el punto decimal de los permitidos por la escala especÃ­fica, el valor se convierte a tal escala. (El comportamiento preciso depende del sistema operativo, pero generalmente el efecto es que se trunca al nÃºmero de dÃ­gitos permitidos.)\n\nDesde MySQL 5.0.3, el tipo de datos BIT puede usarse para guardar valores de un bit. Un tipo BIT(M) permite el almacenamiento de valores de M-bit . M tiene un rango de 1 a 64.\n\nPara especificar valores bit, puede usar la notaciÃ³n b\\''value\\'' . value es un valor binario escrito usando ceros y unos. Por ejemplo, b\\''111\\'' y b\\''100000000\\'' representan 7 y 128, respectivamente. Consulte SecciÃ³n 9.1.5, â€œValores de bitsâ€.\n\nSi asigna un valor a una columna BIT(M) con menos de M bits , el valor se alinea a la izquierda con ceros. Por ejemplo, asignar un valor b\\''101\\'' a una columna BIT(6) es, en efecto, lo mismo que asignar b\\''000101\\''.\n\nCuando se intenta almacenar un valor en una columna numÃ©rica que estÃ¡ fuera del rango permitido por la columna, MySQL corta el valor en el final del rango permitido y guarda el valor resultante.\n\nPor ejemplo, el ranto de una coluna INT es de -2147483648 a 2147483647. Si intenta insertar -9999999999 en una columna INT, MySQL reemplaza el valor con el mÃ­nimo valor del rango y almacena -2147483648 en su lugar. De forma similar, si trata de insertar 9999999999, MySQL reemplaza el valor con el valor mÃ¡ximo del rango y almacena 2147483647 en su lugar.\n\nSi la columna INT es UNSIGNED, el tamaÃ±o del rango de la columna es el mismo, pero los lÃ­mites cambian a 0 y 4294967295. Si intenta almacenar -9999999999 y 9999999999, los valores almacenados en la columna son 0 y 4294967296.\n\nCuando se asigna un valor fuera de rango especificado (o por defecto) a una columna de coma flotante o fija, MySQL almacena el valor representado por el valor correspondiente al lÃ­mite de rango correspondiente.\n\nLas conversiones debidas a valores fuera de rango se reportan como advertencias para los comandos ALTER TABLE, LOAD DATA INFILE, UPDATE, y INSERT de mÃºltiples registros.', 'Noticias', 'aprobada');
INSERT INTO `buscador` VALUES (11, 'Campos tipo cadena de caracteres en MySQL', 'Los tipos de cadena de caracteres utilizados por MySQL son los CHAR, VARCHAR, BINARY, VARBINARY, los campos BLOB y TEXT y los de lista ENUM y SET.\n\nCHAR Y VARCHAR\n\nSon campos para almacenar caracteres y difieren en:\n\n    * cÃ³mo se almacenan\n    * cÃ³mo se recuperan\n    * longitud mÃ¡xima (Desde MySQL 5.0.3)\n    * cÃ³mo se tratan los espacios finales.\n\nLos tipos CHAR y VARCHAR se declaran con una longitud que indica el mÃ¡ximo nÃºmero de caracteres que quiere almacenar. Por ejemplo, CHAR(30) puede almacenar hasta 30 caracteres.\n\nLa longitud de una columna CHAR se fija a la longitud que se declara al crear la tabla. La longitud puede ser cualquier valor de 0 a 255. Cuando los valores CHAR se almacenan, se aÃ±aden espacios a la derecha hasta las longitud especÃ­fica. Cuando los valores CHAR se recuperan, estos espacios se borran.\n\nLos valores en columnas VARCHAR son cadenas de caracteres de longitud variable. En MySQL 5.0, la longitud puede especficarse de 0 a 255 antes de MySQL 5.0.3, y de 0 a 65,535 en 5.0.3 y versiones posteriores. (La mÃ¡xima longitud efectiva de un VARCHAR en MySQL 5.0 se determina por el tamaÃ±o de registro mÃ¡ximo y el conjunto de caracteres usados. La longitud mÃ¡xima total es de 65,532 bytes.)\n\nEn contraste con CHAR, VARCHAR almacena los valores usando sÃ³lo los caracteres necesarios, mÃ¡s un byte adicional para la longitud (dos bytes para columnas que se declaran con una longitud superior a 255).\n\nLos valores VARCHAR no se cortan al almacenarse. El tratamiento de espacios al final depende de la versiÃ³n. Desde MySQL 5.0.3, los espacios finales se almacenan con el valor y se retornan, segÃºn el estÃ¡ndar SQL. Antes de MySQL 5.0.3, los espacios finales se eliminan de los valores cuando se almacenan en una columna VARCHAR, esto significa que los espacios tambiÃ©n estÃ¡n ausentes de los valores retornados.\n\nDurante el almacenamiento y la recuperaciÃ³n de valores no hace ninguna conversiÃ³n de mayÃºsculas y minÃºsculas.\n\nSi asigna un valor a una columna CHAR o VARCHAR que exceda la longitud mÃ¡xima de la columna, el valor se trunca. Si los caracteres truncados no son espacios, se genera una advertencia. Puede hacer que aparezca un error en lugar de una advertencia usando modo SQL estricto.\n\nAntes de MySQL 5.0.3, si necesita un tipo de datos para el que no se borren los espacios finales, considere usar un tipo BLOB o TEXT . TambiÃ©n, si quiere almacenar valores binarios como resultados de encriptaciÃ³n o compresiÃ³n que puedan contener valores byte arbitrarios, use una columna BLOB en lugar de CHAR o VARCHAR, para evitar problemas potenciales con eliminaciÃ³n de espacios finales que puedan cambiar los valores de los datos.\n\nLa siguiente tabla ilustra las diferencias entre los dos tipos de columnas mostrando el resultado de almacenar varios valores de cadenas de caracteres en columnas CHAR(4) y VARCHAR(4) :\nValor 	CHAR(4) 	Almacenamiento', 'Revisiones', 'aprobada');
INSERT INTO `buscador` VALUES (12, 'Campos de fecha y hora en MySQL', 'Los tipos de fecha y hora para representar valores temporales son DATETIME, DATE, TIMESTAMP, TIME, y YEAR. Cada tipo temporal tiene un rango de valores legales, asÃ­ como un valor â€œzeroâ€ que se usa cuando se especifica un valor ilegal que MySQL no puede representar. El tipo TIMESTAMP tiene un comportamiento automÃ¡tico especial, descrito posteriormente.\n\nDesde MySQL 5.0.2, MySQL da advertencias/errores si trata de insertar una fecha ilegal. Puede hacer que MySQL acepte ciertas fechas, tales como â€™1999-11-31â€², usando el modo SQL ALLOW_INVALID_DATES . (Antes de 5.0.2, este modo era el comportamiento por defecto de MySQL). Esto es Ãºtil cuando quiere almacenar el valor â€œposiblemente errÃ³neoâ€ que el usuario especifica (por ejemplo, en un formulario web) en la base de datos para un posterior procesamiento. En este modo, MySQL sÃ³lo verifica que el mes estÃ© en el rango de 0 a 12 y que el dÃ­a estÃ© en el rango de 0 a 31. Estos rangos incluyen cero ya que MySQL permite almacenar fechas cuando el dÃ­a o el mes son cero en columnas DATE o DATETIME . Esto es muy Ãºtil para aplicaciones que necesiten almacenar una fecha de nacimiento para la que no sepa la fecha exacta. En este caso, simplemente almacena la fecha como â€™1999-00-00â€² o â€™1999-01-00â€². Si almacena valores similares a estos, no debe esperar obtener resultados correctos para funciones tales como DATE_SUB() or DATE_ADD que necesitan fechas completas. (Si no quiere permitir ceros en las fechas, puede usar el modo SQL NO_ZERO_IN_DATE ).\n\nMySQL permite almacenar â€™0000-00-00â€² como â€œfecha de pruebasâ€ (si no estÃ¡ usando el modo SQL NO_ZERO_DATE ). Esto es mejor que usar (y usa menos espacio de datos e Ã­ndice) que usar valores NULL .\n\nModificando la variable de sistema sql_mode al modo apropiado, puede especificar exactamente quÃ© tipos de datos quiere soportar con MySQL. Consulte SecciÃ³n 5.3.2, â€œEl modo SQL del servidorâ€.\n\nAquÃ­ hay algunas consideraciones generales a tener en cuenta cuando se trabaja con tipos de fecha y hora:\n\n    * MySQL muestra los valores para una fecha o hora en un formato de salida estÃ¡ndar, pero trata de intepretar una variedad de formatos para los valores de entrada que se proporcionan (por ejemplo, cuando especifica un valor para asignar o comparar con un tipo fecha o hora). SÃ³lo los formatos descritos en las siguientes secciones son soportados. Se espera la entrada de valores legales. Si se usan otros formatos pueden ocurrir resultados imprevisibles.\n    * Las fechas con aÃ±os de dos dÃ­gitos son ambituas, ya que no se sabe el siglo. MySQL interpreta los aÃ±os de dos dÃ­gitos usando las siguientes reglas:', 'Reportes', 'aprobada');
INSERT INTO `buscador` VALUES (13, 'Miembros EstÃ¡ticos (Static) o de Clase (POO 05)', 'En la Ãºltima entrega de POO habÃ­amos visto los modificadores de acceso dentro de ellos los estÃ¡ticos. Ahora ampliaremos un poco mÃ¡s sobre el tema de mÃ©todos y atributos estÃ¡ticos (static) Considere ampliar el tema mÃ¡s bien porque tuve que resolver algunos problemas que tenÃ­an que ver con los miembros static.\nPrimero diremos que los miembros static tambiÃ©n reciben el nombre de -elementos de clase-, porque no pertenecen a un objeto (instancia de clase) en concreto, si no a la clase como entidad.\n\nEn PHP los elementos estÃ¡ticos se definen de la siguiente manera:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n	\n\n<?php\nclass EjemploEstatico\n{\n	private static $atributoEstatico   = \\''Soy un atributo estatico\\'';\n \n \n	public static function metodoEstatico()\n	{\n		echo \\''Soy un metodo Estatico\\'';\n	}\n}\n\nHabÃ­amos visto que una de las particularidades del modificador static es que no se necesita de una instancia de la clase (objeto) para poder acceder a ellos, esto trae como consecuencia que la seudo-variable $this no estÃ¡ disponible dentro de un mÃ©todo declarado como static, pues esta ultima hace referencia a una instancia (objeto) y no siempre disponemos de una instancia en la llamada a mÃ©todos estÃ¡ticos, para lograr este cometido se usa self::.\n\nEntonces para acceder al atributo estÃ¡tico desde la clase usarÃ­amos self::$atributoEstatico;\n\nAparte un mÃ©todo estÃ¡tico tampoco puede acceder a los atributos de la clase que no sean estÃ¡ticos, ya que un mÃ©todo estÃ¡tico normalmente se lo llama sin crear un objeto de dicha clase (instancia) por lo cual no estarÃ­an disponibles los demÃ¡s atributos.\n\nComplementaremos nuestra clase para ver el comportamiento de los miembros static, ademÃ¡s activaremos los errores de tipo E_STRICT .', 'Noticias', 'aprobada');
INSERT INTO `buscador` VALUES (14, 'Convertir de Romanos a Decimal y viceversa', 'Bueno les dejo una clase para convertir de nÃºmeros romanos a decimal y tambiÃ©n realizar el proceso inverso. Puede resultar Ãºtil para presentar fechas en formato romano.\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n\n	\n\n<?php\n/**\n * Clase NumerosRomanos.\n * Realiza conversiones entre numeros romanos y decimales.\n * Compatible con error_reporting(E_ALL | E_STRICT).\n *\n * @package     matematicas creado para forosdelweb.\n * @copyright   2010 - ObjetivoPHP\n * @license     Gratuito (Free) http://www.opensource.org/licenses/gpl-license.html\n * @author      Marcelo Castro (ObjetivoPHP)\n * @link        objetivophp@gmail.com\n * @version     0.2.1 (16/08/2010 - 18/08/2010)\n */\nabstract class NumerosRomanos\n{\n    /**\n     * Contiene las equivalencias de numeros romanos para unidades, decimales,\n     * centenas y miles.\n     * @var array\n     */\n    private static  $_romanos =     array(0   =>    array(0 => \\''\\'',\n                                                          1 => \\''I\\'',\n                                                          2 => \\''II\\'',\n                                                          3 => \\''III\\'',\n                                                          4 => \\''IV\\'',\n                                                          5 => \\''V\\'',\n                                                          6 => \\''VI\\'',\n                                                          7 => \\''VII\\'',\n                                                          8 => \\''VIII\\'',\n                                                          9 => \\''IX\\''),\n                                          1    =>   array(0 => \\''\\'',\n                                                          1 => \\''X\\'',\n                                                          2 => \\''XX\\'',\n                                                          3 => \\''XXX\\'',\n                                                          4 => \\''XL\\'',\n                                                          5 => \\''L\\'',\n                                                          6 => \\''LX\\'',\n                                                          7 => \\''LXX\\'',\n                                                          8 => \\''LXXX\\'',\n                                                          9 => \\''XC\\''),\n                                          2   =>    array(0 => \\''\\'',\n                                                          1 => \\''C\\'',\n                                                          2 => \\''CC\\'',\n                                                          3 => \\''CCC\\'',\n                                                          4 => \\''CD\\'',\n                                                          5 => \\''D\\'',\n                                                          6 => \\''DC\\'',\n                                                          7 => \\''DCC\\'',\n                                                          8 => \\''DCCC\\'',\n                                                          9 => \\''CM\\''),\n                                          3 =>      array(0 => \\''\\'',\n                                                          1 => \\''M\\'',\n                                                          2 => \\''MM\\'',\n                                                          3 => \\''MMM\\''));\n \n    /**\n     * Contiene los divisores para identificar por donde comenzar la conversion.\n     * @var array\n     */\n    private static $_divisores =    array(1, 10, 100, 1000);\n \n    /**\n     * Contiene las equivalencias entre romano y decimal.\n     * @var array\n     */\n    private static $_decimal =      array(\\''.\\''   => 0,\n                                          \\''I\\''   => 1,\n                                          \\''V\\''   => 5,\n                                          \\''X\\''   => 10,\n                                          \\''L\\''   => 50,\n                                          \\''C\\''   => 100,\n                                          \\''D\\''   => 500,\n                                          \\''M\\''   => 1000);\n \n    /**\n     * Convierte un numero expresado en decimal a notacion Romana.\n     * @param   integer $numero Numero que se desea convertir en romano.\n     *                  desde 0 a 3999.-\n     * @return  string\n     */\n    public static function decimalRomano($numero)\n    {\n        $retorno = \\''\\'';\n        $max = (int)log10($numero);\n        for ($div = $max; $div > -1; $div--) {\n            $aux     =  (int)($numero/self::$_divisores[$div]);\n                $retorno.= self::$_romanos[$div][$aux];\n                $numero -=self::$_divisores[$div]*$aux;\n        }\n        return $retorno;\n    }\n \n    /**\n     * Convierte un numero expresado en romanos a notacion decimal.\n     * @param   string $romano  Numero de tipo romano Ej.DCCCLXXXVIII.\n     * @return  integer\n     */\n    public static function romanoDecimal($romano)\n    {\n        $decimal    = 0;\n        $letras     = strlen($romano);\n        $romano    .= \\''.\\'';\n        for ($r = 0; $r < $letras; $r  ) {\n            $valorI     = self::$_decimal[$romano[$r]];\n            $valorII    = self::$_decimal[$romano[$r 1]];\n            $decimal  = ($valorI < $valorII)? - $valorI : $valorI;\n        }\n        return $decimal;\n    }\n}\n\nLa utilizaciÃ³n es fÃ¡cil para convertir de decimal a romano hacemos:', 'Noticias', 'aprobada');
INSERT INTO `buscador` VALUES (15, 'Clase Directorio', 'La clase directorio, se encarga de recorrer un directorio y proporcionar informaciÃ³n sobre los directorios y archivos que lo componen. La informaciÃ³n final puede ser un simple arreglo, solo con los nombres de los archivos o directorios encontrados o un arreglo con informaciÃ³n extendida, como ser ruta absoluta, tamaÃ±o, fecha de creaciÃ³n etc. TodavÃ­a le faltan cosas pero puede resultar bastante Ãºtil, para recorrer directorios con facilidad.\n\nBueno aquÃ­ les dejo la clase y como siempre cualquier comentario o sugerencia serÃ¡n bienvenidos.\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n\n	\n\n<?php\n/**\n * Clase Directorio.\n * Se encarga de recorrer directorios y proporcionar informacion de los archivos y\n * directorios que contiene.\n *\n * @package     archivos creado en el projecto opet\n * @copyright   2010 - ObjetivoPHP\n * @license     Gratuito (Free) http://www.opensource.org/licenses/gpl-license.html\n * @author      Marcelo Castro (ObjetivoPHP)\n * @link        objetivophp@gmail.com\n * @version     0.2.0 (24/03/2009 - 12/08/2010)\n */\nclass Directorio\n{\n    /**\n     * Especifica que tipo de listado se retornara.\n     * En este caso solo se listan los directorios.\n     */\n    const OP_LIST_DIRECTORIOS = 1;\n \n    /**\n     * Especifica que tipo de listado se retornara.\n     * En este caso solo se listan los archivos.\n     */\n    const OP_LIST_ARCHIVOS    = 2;\n \n    /**\n     * Especifica que tipo de listado se retornara.\n     * En este caso lista directorios y archivos.\n     */\n    const OP_LIST_AMBOS       = 3;\n \n    /**\n     * Solo se accedera de este directorio hacia abajo, a sus hijos no se listan\n     * los padres del directorio. Es el directorio Base.\n     * @var string\n     */\n    private $_dirBase = \\''./\\'';\n \n    /**\n     * Marca cuantos directorios hacia abajo listara. Con cero solo listara el\n     * directorio base.\n     * @var integer\n     */\n    private $_profundidadEscaneo = 0;\n \n    /**\n     * Configuramos que tipo de resultados queremos. Solo archivos, solo\n     * directorios o retorna ambos.\n     * @var integer\n     */\n    private $_listarDir = 3;\n \n    /**\n     * Contiene los tipos de archivos que se listaran.\n     * @var array\n     */\n    private $_tipoArchivos = array();\n \n    /**\n     * Guarda los resultados de la busqueda.\n     * @var array\n     */\n    private $_resultados = array();\n \n    /**\n     * Metodo __construct.\n     * @param   string $dirExploracion  Directorio base de la exploracion.\n     *                                  No se puede utilizar ../, en caso de necesitar\n     *                                  y hacia atras utilizar direcciones absolutas.\n     * @return  void\n     */\n    public function  __construct($dirExploracion)\n    {\n        if (strpos(\\''../\\'', $dirExploracion)) {\n            trigger_error(\\''Directorio de Exploracion no valido.\\'', E_USER_ERROR);\n        }\n        $this->_dirBase = $dirExploracion;\n        date_default_timezone_set(\\''America/Montevideo\\'');\n    }\n \n    /**\n     * Metodo setProfundidadEscaneo.\n     * @param   integer $profundidad    Cantidad de directorios que se analizaran\n     *                                  en cascada.\n     * @return  void\n     */\n    public function setProfundidadEscaneo($profundidad = 0)\n    {\n        $this->_profundidadEscaneo = (int) $profundidad;\n    }\n \n    /**\n     * Metodo setListarDirectorios.\n     * @param   integer     $dir 1 directorios, 2 archivos, 3 ambos.\n     * @return  void\n     */\n    public function setListarDirectorios($listado = 3)\n    {\n        switch ($listado) {\n            case Directorio::OP_LIST_DIRECTORIOS:\n                $this->_listarDir   = Directorio::OP_LIST_DIRECTORIOS;\n                break;\n            case Directorio::OP_LIST_ARCHIVOS:\n                $this->_listarDir   = Directorio::OP_LIST_ARCHIVOS;\n                break;\n            case Directorio::OP_LIST_AMBOS:\n                $this->_listarDir   = Directorio::OP_LIST_AMBOS;\n                break;\n            default :\n                $this->_listarDir   = Directorio::OP_LIST_AMBOS;\n        }\n    }\n \n    /**\n     * Metodo addTiposArchivosListar.\n     * @param   string  $extencion  Extencion de los archivos a listar.\n     * @return  void\n     */\n    public function addTiposArchivosListar($extencion)\n    {\n        $this->_tipoArchivos[] = addslashes($extencion);\n    }\n \n    /**\n     * Metodo listar.\n     * Enruta las peticiones de listado al metodo correspondiente y retorna\n     * los datos obtenidos.\n     * @return array\n     */\n    public function listar()\n    {\n        switch ($this->_listarDir) {\n            case Directorio::OP_LIST_DIRECTORIOS:\n                $this->_listarDirectorios();\n                break;\n            case Directorio::OP_LIST_ARCHIVOS:\n                $this->_listarArchivos();\n                break;\n            case Directorio::OP_LIST_AMBOS:\n                $this->_listarTodo();\n                break;\n            default :\n                $this->_listarTodo();\n        }\n        return $this->_resultados;\n    }\n \n    /**\n     * Metodo _listarArchivos.\n     * Genera el arreglo de resultados correspondiente solo a archivos.\n     * @return void\n     */\n    public function _listarArchivos()\n    {\n        $objIterator = new RecursiveIteratorIterator($obj_Directory = new RecursiveDirectoryIterator($this->_dirBase),\n                                                     RecursiveIteratorIterator::SELF_FIRST);\n        $objIterator->setMaxDepth($this->_profundidadEscaneo);\n        // Recorro los Archivos.\n        foreach ($objIterator as $file) {\n            if (is_file($file)) {\n                $ext        = substr($file, strripos($file, \\''.\\'') 1);\n                if (in_array($ext, $this->_tipoArchivos)) {\n                    $this->_resultados[$file->__toString()] = array(\\''date\\''      => date(\\"d-m-Y H:i\\",$obj_Directory->getATime()),\n                                                                    \\''dateUpdate\\''=> date(\\"d-m-Y H:i\\",$obj_Directory->getMTime()),\n                                                                    \\''size\\''      => filesize($file),//$obj_Directory->getSize(),\n                                                                    \\''hash\\''      => sha1_file($file),\n                                                                    \\''name\\''      => substr($file, strripos($file, DIRECTORY_SEPARATOR ) 1));\n                }\n            }\n        }\n        ksort($this->_resultados);\n    }\n \n    /**\n     * Metodo _listarDirectorios.\n     * Genera el arreglo de resultados correspondiente solo a directorios.\n     * @return void\n     */\n    public function _listarDirectorios()\n    {\n        $objIterator = new RecursiveIteratorIterator($obj_Directory = new RecursiveDirectoryIterator($this->_dirBase),\n                                                     RecursiveIteratorIterator::SELF_FIRST);\n        $objIterator->setMaxDepth($this->_profundidadEscaneo);\n        // Recorro los directorios.\n        foreach ($objIterator as $file) {\n            if (is_dir($file)) {\n                $this->_resultados[$file->__toString()] = array(\\''date\\''      => date(\\"d-m-Y H:i\\",$obj_Directory->getATime()),\n                                                                \\''dateUpdate\\''=> date(\\"d-m-Y H:i\\",$obj_Directory->getMTime()));\n            }\n        }\n    }\n \n    /**\n     * Metodo _listarTodo.\n     * Genera el arreglo de resultados correspondiente a directorios y archivos.\n     * @return void\n     */\n    public function _listarTodo()\n    {\n        $this->_listarDirectorios();\n        $this->_listarArchivos();\n        ksort($this->_resultados);\n    }\n \n    /**\n     * Metodo getNombresArchivos.\n     * Retorna solo los nombre de archivos.\n     * @return array\n     */\n    public function getNombresArchivos()\n    {\n        $objIterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($this->_dirBase),\n                                                     RecursiveIteratorIterator::SELF_FIRST);\n        $objIterator->setMaxDepth($this->_profundidadEscaneo);\n        // Recorro los Archivos.\n        foreach ($objIterator as $file) {\n            if (is_file($file)) {\n                $ext        = substr($file, strripos($file, \\''.\\'') 1);\n                if (in_array($ext, $this->_tipoArchivos)) {\n                    $this->_resultados[] = substr($file, strripos($file, DIRECTORY_SEPARATOR ) 1);\n                }\n            }\n        }\n        return $this->_resultados;\n    }\n}\n\nForma de Utilizar la Clase\nLa clase tiene unos pocos mÃ©todos, los cuales nos permiten configurar la salida de la misma, ellos son:\n\n    * addTiposArchivosListar: Con este mÃ©todo incluimos las extensiones de los tipos de archivos que se quieren como resultado, por ejemplo jpg, png, se tiene que invocar uno por cada tipo de archivo que queramos.\n    * setListarDirectorios: Aqui lo que vamos a poder establecer es si queremos que liste solo directorios, solo archivos o ambas cosas, para eso le pasaremos la constante de clase OP_LIST_DIRECTORIOS (1), OP_LIST_ARCHIVOS (2), OP_LIST_AMBOS (3).\n      Por defecto se asume que se quieren listar directorios y archivos.\n    * setProfundidadEscaneo: configuramos cuantos niveles de sub-directorios se recorrerÃ¡n, si no usamos este metodo se asume que solo se quiere explorar el directorio base.', 'Reportes', 'aprobada');
INSERT INTO `buscador` VALUES (16, 'Paginador en PHP', 'Bueno hoy les voy a dejar una clase, que digamos la resucite, la tenia olvidada en algÃºn directorio dentro de mis proyectos y como en varios foros pude observar que se preguntaba de como realizar un paginador o utilizar uno existente, la actualice un poco y hoy se los dejo aquÃ­. Si bien es una clase su utilizaciÃ³n es sencilla.\n\nEntre sus caracterÃ­sticas le podemos configurar los comentarios de ir a la primera pagina, ultima etc y tambiÃ©n dispone de un paso de bloque siguiente o anterior.\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n\n	\n\n<?php\n/**\n * Clase Paginador.\n * Su responsabilidad es realizarnos el paginado de una consulta, es decir\n * proporcionar datos para realizar la barra de navegacion de la paginacion.\n * @package     varias creado en el projecto opet\n * @copyright   2010 - ObjetivoPHP\n * @license     Gratuito (Free) http://www.opensource.org/licenses/gpl-license.html\n * @author      Marcelo Castro (ObjetivoPHP)\n * @link        objetivophp@gmail.com\n * @version     2.0.0 (16/06/2008 - 27/08/2010)\n */\nclass Paginador\n{\n    /**\n     * Contiene los titulos que se mostraran en la barra de navegacion. O sea\n     * primera, anteriror, .... , ultima, siguiente etc...\n     * @var array\n     */\n    private $_titulos = array(\\''primero\\''           => array(\\''vista\\''  => \\''| Primero ...\\'',\n                                                           \\''title\\''  => \\''Ir a la primera Pagina\\''),\n                              \\''bloqueAnterior\\''    => array(\\''vista\\''  => \\''<<\\'',\n                                                           \\''title\\''  => \\''Bloque Anterior\\''),\n                              \\''anterior\\''          => array(\\''vista\\''  => \\''<\\'',\n                                                           \\''title\\''  => \\''Pagina Anterior\\''),\n                              \\''siguiente\\''         => array(\\''vista\\''  => \\''>\\'',\n                                                           \\''title\\''  => \\''Pagina Siguiente\\''),\n                              \\''bloqueSiguiente\\''   => array(\\''vista\\''  => \\''>>\\'',\n                                                           \\''title\\''  => \\''Bloque Siguiente\\''),\n                              \\''ultimo\\''            => array(\\''vista\\''  => \\''... Ultimo |\\'',\n                                                           \\''title\\''  => \\''Ir a la Ultima Pagina\\''),\n                              \\''numero\\''            => array(\\''vista\\''  => null,\n                                                           \\''title\\''  => \\''Ir a la pagina \\''),\n                              \\''actual\\''            => array(\\''vista\\''  => null,\n                                                           \\''title\\''  => \\''Estas viendo esta pagina\\'')\n                             );\n \n    /**\n     * Contiene los marcadores que van antes y despues de la pagina actual,\n     * para identificarla visualmente en la barra de navegacion del paginador.\n     * @var array\n     */\n    private $_marcador = array(\\''antes\\''      => \\''|\\'',\n                               \\''despues\\''    => \\''|\\'');\n \n    /**\n     * Guarda el resultado de la paginacion por si es requrido mas tarde.\n     * Formato array(\\''vista\\'' => \\''primero\\'', \\''numero\\'' => 0).\n     * @var array\n     */\n    private $_paginacion = array();\n \n    /**\n     * Es la cantidad de registros, filas de la tabla que se mostraran por cada\n     * pantalla.\n     * @var integer\n     */\n    private $_cantidadDeRegistrosPorPagina = 10;\n \n    /**\n     * Es la cantidad de Enlaces o vinculos que contendra el paginador, sin contar\n     * los especiales como ser primero, ultimo etc..\n     * @var integer\n     */\n    private $_cantidadDeEnlacesDelPaginador = 10;\n \n    /**\n     * Contiene la cantidad total de paginas del paginador.\n     * @var integer\n     */\n    private $_cantidadPaginas;\n \n    /**\n     * Metodo __construct.\n     * Crea el objeto Paginador.\n     * @param   integer $crpp   Cantidad de Registros a desplegarse en cada Pagina.\n     * @param   integer $cepp   Cantidad de enlaces del paginador, sin especiales.\n     * @return  void\n     */\n    public function  __construct($crpp = 10, $cep = 10)\n    {\n        $this->_cantidadDeRegistrosPorPagina    = ((int)$crpp > 0)? $crpp : 10;\n        $this->_cantidadDeEnlacesDelPaginador   = ((int)$cep > 0)? $cep : 10;\n    }\n \n    /**\n     * Metodo setCantidadRegistros.\n     * Configura la cantidad de registros que se desplegan en la pantalla.\n     * @param   integer $cantidad   Cantidad de Registros por pagina.\n     * @return  void\n     */\n    public function setCantidadRegistros($cantidad = 10)\n    {\n        $this->_cantidadDeRegistrosPorPagina    = ((int)$cantidad > 0)? $cantidad : 10;\n    }\n \n    /**\n     * Metodo setCantidadEnlaces.\n     * Configura la cantidad de enlaces que contendra el paginador sin considerar los\n     * enlaces especiales.\n     * @param   integer $cantidad   Cantidad de Enlaces que se quieren mostrar.\n     * @return  void\n     */\n    public function setCantidadEnlaces($cantidad = 10)\n    {\n        $this->_cantidadDeEnlacesDelPaginador   = ((int)$cantidad > 0)? $cantidad : 10;\n    }\n \n    /**\n     * Metodo paginar.\n     * Realiza el paginado, generando todos los bloques.\n     * @param   integer $pagina Contiene desde que pagina se desplegara.\n     * @param   integer $cantidadDeResultados  total de resutados de la consulta.\n     * @return  array\n     */\n	public function paginar($pagina,$cantidadDeResultados)\n	{\n        $pagina = ((int)$pagina < 0)? 0 : $pagina;\n        if ($cantidadDeResultados < 1) { // No hay resultados que paginar\n            return false;\n        }\n        // Aqui significa que tenemos resultados y vamos a paginar\n        // Preparo las variables que se utilizaran\n		$paginaInicial  = $paginaFinal    = 0;\n		$paginacion     = array();\n		$totalPaginas	= ceil($cantidadDeResultados / $this->_cantidadDeRegistrosPorPagina);\n \n		if ($totalPaginas < 2) { // Si es menor a 2 es una pagina por lo tanto no pagino.\n            $this->_cantidadPaginas = 1;\n            return false;\n        }\n \n	   	if ($totalPaginas <= $this->_cantidadDeEnlacesDelPaginador) {\n            $paginaInicial		= 1;\n			$paginaFinal		= $totalPaginas;\n		} else {\n            $centroPaginador 	= floor($this->_cantidadDeEnlacesDelPaginador / 2);\n			$paginaInicial		= ($pagina 1) - $centroPaginador;\n			$paginaFinal		= $paginaInicial   $this->_cantidadDeEnlacesDelPaginador - 1;\n \n			if ($paginaFinal > $totalPaginas) {\n                $paginaFinal    = $totalPaginas;\n				$paginaInicial  = $paginaFinal - ($this->_cantidadDeEnlacesDelPaginador -1);\n			}\n \n			if ($paginaInicial < 1) {\n                $paginaInicial	= 1;\n				$paginaFinal	= $this->_cantidadDeEnlacesDelPaginador;\n			}\n		}\n \n		$ajuste				= floor($this->_cantidadDeEnlacesDelPaginador / 2);\n		$ajuste2			= 1 - ($this->_cantidadDeEnlacesDelPaginador % 2);\n		$blockInicio		= $paginaInicial - $this->_cantidadDeEnlacesDelPaginador   $ajuste  - 1;\n		$blockFinal			= $paginaFinal   $this->_cantidadDeEnlacesDelPaginador - $ajuste    $ajuste2;\n \n		$paginaInicial		= $paginaInicial - 1;\n		$paginaFinal		= $paginaFinal - 1;\n \n		if ($totalPaginas > 1) {\n            if ($paginaInicial != 0) {\n                $paginacion[] = array(\\''numero\\''   => 0,\n                                      \\''vista\\''    => $this->_titulos[\\''primero\\''][\\''vista\\''],\n                                      \\''title\\''    => $this->_titulos[\\''primero\\''][\\''title\\'']);\n            }\n		}\n		/* Configurar Block de Inicio */\n		if ($blockInicio > $ajuste) {\n            $paginacion[]    = array(\\''numero\\''    => $blockInicio,\n                                     \\''vista\\''     => $this->_titulos[\\''bloqueAnterior\\''][\\''vista\\''],\n                                     \\''title\\''     => $this->_titulos[\\''bloqueAnterior\\''][\\''title\\'']);\n        }\n		/* Configurar anterior */\n		if($pagina > 0) {\n            $paginacion[]    = array(\\''numero\\''    => $pagina-1,\n                                     \\''vista\\''     => $this->_titulos[\\''anterior\\''][\\''vista\\''],\n                                     \\''title\\''     => $this->_titulos[\\''anterior\\''][\\''title\\'']);\n        }\n		/* Inicio Block Central */\n		for ( $f = $paginaInicial; $f <= $paginaFinal; $f  ) {\n            if ($f != $pagina) {\n                $paginacion[]= array(\\''numero\\''    => $f,\n                                     \\''vista\\''     => $f 1,\n                                     \\''title\\''     => $this->_titulos[\\''numero\\''][\\''title\\''] . ($f 1));\n			} else {\n                $paginacion[]= array(\\''numero\\''    => $f,\n                                     \\''vista\\''     => $this->_marcador[\\''antes\\'']\n                                                 . ($f 1) . $this->_marcador[\\''despues\\''],\n                                     \\''title\\''     => $this->_titulos[\\''actual\\''][\\''title\\'']);\n			}\n		}\n		/* Fin block Central */\n		/* Configurar siguiente */\n		if ($pagina < ($totalPaginas-1)) {\n            $paginacion[]    = array(\\''numero\\''    => $pagina 1,\n                                     \\''vista\\''     => $this->_titulos[\\''siguiente\\''][\\''vista\\''],\n                                     \\''title\\''     => $this->_titulos[\\''siguiente\\''][\\''title\\'']);\n        }\n		/* Fin block siguiente */\n		/* Configurar Block de Final */\n        if ($paginaFinal < ($totalPaginas - $this->_cantidadDeEnlacesDelPaginador - 1)) {\n            $paginacion[]    = array(\\''numero\\''    => $blockFinal-1,\n                                     \\''vista\\''     => $this->_titulos[\\''bloqueSiguiente\\''][\\''vista\\''],\n                                     \\''title\\''     => $this->_titulos[\\''bloqueSiguiente\\''][\\''title\\'']);\n        }\n		/* Fin block Final */\n		if ( $paginaFinal != ($totalPaginas - 1)) {\n            $paginacion[]    = array(\\''numero\\''    => $totalPaginas-1,\n                                     \\''vista\\''     => $this->_titulos[\\''ultimo\\''][\\''vista\\''],\n                                     \\''title\\''     => $this->_titulos[\\''ultimo\\''][\\''title\\'']);\n		}\n		$this->_paginacion      = $paginacion;\n        $this->_cantidadPaginas = $totalPaginas;\n		return $paginacion;\n	}\n \n    /**\n     * Metodo setTitulosVista.\n     * Configura los simbolos que se usaran para el enunciado de bloques,\n     * primero, ultimo, anterior, siguiente etc...\n     * @param   string  $titulo Titulo que se desea cambiar. primero, ultimo etc.\n     * @param   string  $valor  Valor que tendra la etiqueta.\n     * @return  void\n     */\n    public function setTitulosVista($titulo, $valor)\n    {\n        if (array_key_exists($titulo, $this->_titulos)) {\n           $this->_titulos[$titulo][\\''vista\\''] = $valor;\n        }\n    }\n \n    /**\n     * Metodo setTitulosTitle.\n     * @param   string  $titulo Etiqueta a la que se desea cambiar la propiedad title.\n     * @param   string  $valor  Valor que tendra la etiqueta.\n     * @return  void\n     */\n    public function setTitulosTitle($titulo, $valor)\n    {\n        if (array_key_exists($titulo, $this->_titulos)) {\n           $this->_titulos[$titulo][\\''title\\''] = $valor;\n        }\n    }\n \n    /**\n     * Metodo setMarcador.\n     * @param   string  $antes      Simbolo que va antes del enlace de pagina actual.\n     * @param   string  $despues    Simbolo que va despues del enlace de la pagina actual.\n     * @return  void\n     */\n    public function setMarcador($antes, $despues)\n    {\n        $this->_marcador[\\''antes\\'']   = $antes;\n        $this->_marcador[\\''despues\\''] = $despues;\n    }\n \n    /**\n     * Metodo getPaginacion.\n     * Nos retorna el arreglo de paginacion.\n     * @return array\n     */\n    public function getPaginacion()\n    {\n        return $this->_paginacion;\n    }\n \n    /**\n     * Metodo getCantidadPaginas.\n     * Nos retorna la cantidad de paginas que tiene el paginador.\n     * @return integer\n     */\n    public function getCantidadPaginas()\n    {\n        return $this->_cantidadPaginas;\n    }\n}\n\nBueno pasemos a mostrar el cÃ³digo para utilizar la clase.\nComo siempre debemos incluir el archivo de la clase y para ello utilizamos requiere_once, una vez realizado esto, les comento que debemos haber realizado la consulta MySQL y tener la cantidad total de resultados que nos retorna la consulta. Bueno comencemos con el cÃ³digoâ€¦.', 'Revisiones', 'aprobada');
INSERT INTO `buscador` VALUES (17, 'Generador de Consulta MySQL FullText para un buscador', 'HabÃ­a prometido poner una rutina para realizar un buscador genÃ©rico, o mejor dicho la generaciÃ³n de la consulta a partir de los criterios que el usuario ponga en el campo de bÃºsqueda de nuestro formulario.\n\nLo primero son las limitaciones o requerimientos:\n\n    * La consulta solo servirÃ¡ para base de datos MySQL.\n    * La tabla debe tener su juegos de caracteres en Case Insensitive o sea que no distinga entre mayÃºscula o minÃºsculas en nuestras bÃºsquedas. Son todos los juegos de caracteres que terminan en ci por ej.: utf8_general_ci\n    * Los campos que se utilizaran para realizar el indice FULLTEXT y la bÃºsqueda deben ser del tipo\n         1. CHAR\n         2. VARCHAR\n         3. TEXT\n            o algunas de sus variantes\n    * Utilizaremos la opcion IN BOOLEAN MODE que nos traerÃ¡ algunas ventajas.\n         1. No usa el limite del 50% de los resultados, sin esta opciÃ³n si la cantidad de resultados era mayor al 50% de los registros de la tabla no nos retornaba nada, con esta opciÃ³n si.\n         2. Puede funcionar incluso sin un indice FULLTEXT, aunque enlenteceria enormemente la bÃºsqueda.\n         3. Nos da soporte para usar los siguientes operadores:\n                o   indica que la palabra debe estar presente en cada registro que se retorne.\n                o - indica que la palabra no puede estar presente en los registros que se retornen.\n                o sin operador cuando ni   ni â€“ se especifica la palabra es opcional, pero se le da mas preferencia al registro que la contiene.\n                o > o < estos operadores se usan para aumentar o bajar la relevancia de una palabra en un registro, pero no elimina registros por contener dicha palabra.\n                o ( ) los parÃ©ntesis se usan para agrupar palabras en sub-expresiones. Se pueden anidar expresiones.\n                o ~ operador de negaciÃ³n, da una relevancia negativa de la palabra en el registro, pero a diferencia del operador â€“ no elimina el registro de los resultados de la bÃºsqueda.\n                o â€œ palabras entere comillas se buscaran literalmente, es decir debe existir una coincidencia exacta en las frases.\n                o * sirve como operador de truncado, en el caso de este buscador, no sera necesario usarlo puesto que la generaciÃ³n de la consulta se encargara de hacerlo.\n\nLo primero es crear nuestra tabla por ejemplo podrÃ­a ser la siguiente:\nSQL_CALC_FOUND_ROWS', 'Revisiones', 'aprobada');
INSERT INTO `buscador` VALUES (18, 'DEAME3P versiÃ³n 5 â€“ Exportar e Importar datos desde Excel 2007 a MySQL.', '12/03/2010: ActualizaciÃ³n DEAME3P a la versiÃ³n 5.0.5 Corrige errores de tipo Strict, descargarlo del enlace al final del articulo.\n\nDisponible la versiÃ³n 5.0.0 final de Deame3p, ahora aparte de exportar datos de excel hacia MySQL, tambiÃ©n realiza la importaciÃ³n es decir genera a partir de una tabla MySQL un archivo excel. AÃ±adimos tambiÃ©n un administrador (ABM) bÃ¡sico para tablas que esta en desarrollo. Los Cambios con respecto a la versiÃ³n 4.0.1 son:\n\n    * ABM basico para tablas de Mysql incluye buscador con paginacion.\n    * Consola para generar archivos Excel a traves de consultas MySQL.\n    * ConfiguraciÃ³n de php.ini no solo en la exportacion, ahora puede realizarse de forma independiente.\n    * MenÃº de borrado de archivos en el directorio planillas, separado de la accion de envio.\n    * Importar a Excel desde MySQL con seleccion de los campos a importar.\n    * Vista previa para archivos que se encuentran en el servidor solo para los excel 2007.\n    * ActualizaciÃ³n de la interfaz grafica de usuario y del logo.\n\nCualquier error que encuentren por favor si me lo pueden hacer llegar para ir mejorandolo..\nGracias\n\nDEAME3P VersiÃ³n 5.0.0 final', 'Revisiones', 'aprobada');
INSERT INTO `buscador` VALUES (19, 'PHP: Â¿Como contar valores repetitivos de un array', 'Supongamos que tenemos un array en el cual por el motivo que sea, tenemos varios valores que se repiten.\n\n$colores = array(0 => \\''Azul\\'',\n                            1 => \\''Amarillo\\'',\n                            2 => \\''Rojo\\'',\n                            3 => \\''Amarillo\\'',\n                            4 => \\''Verde\\'');\n\nÂ¿Como podrÃ­amos saber cuantas veces se repite X valor?. Siguiendo el ejemplo... Â¿Como podemos saber cuantes veces se repite el color Amarillo?\n\nAsÃ­: Primero utilizamos array_keys para que nos devuelva las claves/llaves/keys del array. Sin embargo, no le vamos a decir que nos las devuelva todas. Sino que nos devuelva las claves que tienen un mismo valor. En este caso, el valor Amarillo. Aviso: Este ejemplo no funcionara en versiones anteriores a PHP5.\n\n \n   $buscar = (array_keys($colores, \\"Amarillo\\"));\n\nUna vez obtenidas las claves/llaves/keys que tienen un mismo valor. Pasamos a contar cuantas son en su totalidad.\n\n \n   $contador = count($buscar);\n\nEso es todo. El cÃ³digo final es este:\n\n \n   $colores = array(0 => \\''Azul\\'',\n                            1 => \\''Amarillo\\'',\n                            2 => \\''Rojo\\'',\n                            3 => \\''Amarillo\\'',\n                            4 => \\''Verde\\'');\n        $buscar = (array_keys($colores, \\"Amarillo\\"));\n        $contador = count($buscar);\n        echo \\"Amarillo se repite $contador veces\\";\n\nComo ven es supersencillo y puede resultar muy Ãºtil para alguna que otra ocasiÃ³n. Saludos de DeFFeR 19 Ago 2010', 'Reportes', 'aprobada');
INSERT INTO `buscador` VALUES (20, 'PHP:Â¿QuÃ© es una sesiÃ³n de PHP?', 'BÃ¡sicamente es una forma de almacenar variables (sean simples, arrays e incluso objetos) -temporalmente- en el servidor. No asÃ­ como las cookies que se almacenan en el cliente (PC del usuario). Estas variables se guardan en el servidor en un fichero que se crea en el momento que almacenamos una variable. La ubicaciÃ³n la determina la directiva de php.ini session.save_path. El nombre que se le da a ese fichero creado es: sess_asdf234arfae34q (similar) donde el \\"cÃ³digo\\" que hay despuÃ©s de _ es lo que denominan \\"SID\\" Identificador Unico de SesiÃ³n.', 'Reportes', 'aprobada');
INSERT INTO `buscador` VALUES (21, 'PHP:Â¿CÃ³mo envÃ­o un email en formato HTML?', '\n$sfrom=\\"\\"; //cuenta que envia\n$sdestinatario=\\"\\"; //cuenta destino\n$ssubject=\\"\\"; //subject\n$shtml=\\"\\"; //mensaje\n$sheader=\\"From:\\".$sfrom.\\"\\\\nReply-To:\\".$sfrom.\\"\\\\n\\";\n$sheader=$sheader.\\"X-Mailer:PHP/\\".phpversion().\\"\\\\n\\";\n$sheader=$sheader.\\"Mime-Version: 1.0\\\\n\\";\n$sheader=$sheader.\\"Content-Type: text/html\\";\nmail($sdestinatario,$ssubject,$shtml,$sheader);', 'Reportes', 'aprobada');
INSERT INTO `buscador` VALUES (22, 'PHP:Â¿CÃ³mo paso un array de un script.php a otro.php?', 'Hay que serializar el array para enviarlo por el URL o en un formulario en un campo \\"hidden\\" ... Y, en el script que reciba el array deberÃ¡ de des-serializarlo.\n\nA todo esto, es recomendable eliminar los slahes (\\\\ barra invertida) que se generan si usamos magic_quotes_gpc a ON y codificar las variables con urlencode() para evitar problemas con caracteres en nuestros arrays tipo: puntos, comillas y otros caracteres.\n\nenviar_array.php\n\n<?\nfunction array_envia($array) {\n \n    $tmp = serialize($array);\n    $tmp = urlencode($tmp);\n \n    return $tmp;\n}\n \n$array=array(\\"algo\\",\\"nose\\",\\"otracosa\\");\n$array=array_envia($array);\n \n// Usando un formulario y campo hidden.\necho <<<HTML\n<form action=\\"recibir_array.php\\" method=\\"POST\\">\n   <input name=\\"array\\" type=\\"hidden\\" value=\\"$array\\">\n   <input name=\\"enviar\\" type=\\"submit\\" value=\\" Enviar \\">\n</form>\nHTML;\n \n// Usando un link (URL).\necho \\"<a href=\\\\\\"recibir_array.php?array=$array\\\\\\">pasar array</a>\\";\n?> \n\nrecibir_array.php\n\n<?\nfunction array_recibe($url_array) {\n    $tmp = stripslashes($url_array);\n    $tmp = urldecode($tmp);\n    $tmp = unserialize($tmp);\n \n   return $tmp;\n}\n \n \n$array=$_GET[\\''array\\''];\n // el mÃ©todo de envÃ­o usado. (en el ejemplo un link genera un GET. En el formulario se usa POST podrÃ­a ser GET tambiÃ©n ...)\n \n$array=array_recibe($array);\n \nforeach ($array as $indice => $valor){\necho $indice.\\" = \\".$valor.\\"<br>\\";\n}\n?> \n\nAhÃ­ en recibir_array.php tienes un ejemplo de como recorrer el array que has enviado . igualmente puedes acceder por su Ã­ndice: $array[indice] ...\n\nSi usÃ¡semos un formulario para enviar nuestro array ... sÃ³lo tendrÃ­amos que usar un campo hidden comÃºn de formulario y aplicar la funciÃ³n array_envia().', 'Noticias', 'aprobada');
INSERT INTO `buscador` VALUES (23, 'PHP:SMTP utilizando Sockets en PHP', 'Estuve probando cÃ³mo hacer para autenticar usuario SMTP por Sockets y este cÃ³digo me ha dado buenos resultados:\n\n/////////////// Archivo mail.php /////////////////////\n\nset_time_limit(0);\n\ninclude(\\"cmailer.php\\");\n\n$m = new cMailer(); $m->AgregaDireccion(\\"destino1@isp.org\\"); $m->AgregaDireccion(\\"destino2@isp.com\\");\n\n$m->AgregaRemitente(\\"remitente@isp.com\\"); $m->AgregaAsunto(\\"Mensaje de prueba\\");\n\n$m->AgregaMensaje(\\"Este es un sencillo mensaje de prueba configurando Username y Password\\");\n\n$m->AgregaServidor(\\"smtp.isp.com\\");\n\n$m->AgregaNombreUsuario(\\"nombreusuario\\");\n\n$m->AgregaContrasenya(\\"contraseÃ±a\\");\n\n$m->Autenticar();\n\n$m->Enviar();\n\n?>\n\n\n/////////////////// Archivo cmailer.php//////////////////////////////\n\nclass cMailer { var $_Direcciones;\n\nvar $_cantidadDirecciones = 0;\n\nvar $_ConexionSMTP;\n\nvar $_Remitente;\n\nvar $_ServidorSMTP;\n\nvar $_Asunto = \\"\\";\n\nvar $_Mensaje;\n\nvar $_NombreUsuario;\n\nvar $_Contrasenya;\n\nvar $_Autenticar = 0;\n\n\nfunction cMailer() { }\n\n\nfunction AgregaNombreUsuario($NombreUsuario) {\n\n$this->_NombreUsuario = $NombreUsuario; }\n\nfunction AgregaContrasenya($Contrasenya) {\n\n$this->_Contrasenya = $Contrasenya; }\n\nfunction Autenticar() {\n\n$this->_Autenticar = 1; }\n\nfunction NoAutenticar() {\n\n$this->_Autenticar = 0; }\n\nfunction AgregaDireccion($Direccion) {\n\n$this->_Direcciones[$this->_cantidadDirecciones] = $Direccion;\n\n$this->_cantidadDirecciones  ; }\n\nfunction AgregaRemitente($Remitente) {\n\n$this->_Remitente = $Remitente; }\n\nfunction AgregaMensaje($Mensaje) {\n\n$this->_Mensaje = $Mensaje; }\n\nfunction AgregaAsunto($Asunto) {\n\n$this->_Asunto = $Asunto; }\n\nfunction Enviar() {\n\n$cadenaEHLO = \\"EHLO \\".$this->_ServidorSMTP.\\"\\\\r\\\\n\\";\n\nfputs($this->_ConexionSMTP, $cadenaEHLO);\n\nif($this->_Autenticar == 1) {\n\n$cadenaAUTH = \\"AUTH LOGIN\\\\r\\\\n\\";\n\nfputs($this->_ConexionSMTP, $cadenaAUTH);\n\n$cadenaNombreUsuario = base64_encode($this->_NombreUsuario).\\"\\\\r\\\\n\\";\n\nfputs($this->_ConexionSMTP, $cadenaNombreUsuario);\n\n$cadenaContrasenya = base64_encode($this->_Contrasenya).\\"\\\\r\\\\n\\";\n\nfputs($this->_ConexionSMTP, $cadenaContrasenya); }\n\n$cadenaMAIL = \\"MAIL FROM: \\".$this->_Remitente.\\"\\\\r\\\\n\\";\n\nfputs($this->_ConexionSMTP, $cadenaMAIL);\n\nfor($i = 0; $i < $this->_cantidadDirecciones; $i  ) {\n\n$cadenaRCPT .= \\"RCPT TO: \\".$this->_Direcciones[$i].\\"\\\\r\\\\n\\"; }\n\n$cadenaRCPT .= \\"\\\\r\\\\n\\";\n\nfputs($this->_ConexionSMTP, $cadenaRCPT);\n\n$cadenaDATA1 = \\"DATA\\\\r\\\\n\\";\n\nfputs($this->_ConexionSMTP, $cadenaDATA1);\n\nif($this->_Asunto != \\"\\") {\n\n$cadenaSubject = \\"Subject: \\".$this->_Asunto.\\"\\\\r\\\\n\\\\r\\\\n\\";\n\nfputs($this->_ConexionSMTP, $cadenaSubject); }\n\n\n$cadenaDATA2 = $this->_Mensaje.\\"\\\\r\\\\n.\\\\r\\\\n\\";\n\nfputs($this->_ConexionSMTP, $cadenaDATA2);\n\nfputs($this->_ConexionSMTP, \\"QUIT\\\\r\\\\n\\");\n\nfclose($this->_ConexionSMTP); }\n\nfunction AgregaServidor($Servidor, $Puerto = 25) {\n\n$this->_ConexionSMTP = fsockopen(\\"$Servidor\\", \\"$Puerto\\", $e, $em, 5) or die(\\"No puedo abrir el socket\\");\n\necho fgets($this->_ConexionSMTP, 4096).\\"\n\n\\\\n\\";\n\n$this->_ServidorSMTP = $Servidor; }\n\n}\n\n?>', 'Reportes', 'aprobada');
INSERT INTO `buscador` VALUES (24, 'PHP:Â¿Por quÃ© pierde el valor mi variable dentro de mi funciÃ³n?', 'Para poder acceder y modificar el valor de una variable definida fuera de una funciÃ³n hay que referenciarla dentro de la funciÃ³n con global. Por ejemplo:\n\n$var_1=\\''Hola\\'';\nfunction funcion()\n{\n  global $var_1;\n...', 'Noticias', 'aprobada');
